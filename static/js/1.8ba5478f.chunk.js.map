{"version":3,"sources":["components/DifficultyCircle.tsx","components/TopcoderLikeCircle.tsx","utils/TypedCachedApiClient.ts","pages/TablePage/ErrorMessage.tsx","components/Header/Hamburger.tsx","components/Header/Logo.tsx","components/Header/ThemeToggler.tsx","components/Header/Header.tsx","utils/colors.ts"],"names":["DifficultyCircle","props","undefined","rating","title","color","className","String","TopcoderLikeCircle","difficulty","colorCode","getColorCode","fillRatio","calcFillRatio","metalOption","base","highlight","styles","borderColor","background","borderStyle","big","style","defaultProps","CACHED_CONTESTS","STATIC_API_BASE_URL","cachedContestArray","require","fetchUserSubmissions","url","a","tmp","isOk","fetch","then","res","json","x","result","filter","verdict","catch","error","console","log","message","newMap","Map","forEach","t","problem","contestId","index","set","CACHED_USER_SUBMISSIONS","cachedUserSubmissions","userId","get","fetchUserInfo","currentRating","isUserExist","isError","status","userRating","CACHED_USER_INFO","cachedUserInfo","ErrorMessage","type","Hamburger","id","MenuOutlined","Logo","to","ThemeToggler","React","useContext","ThemeContext","setThemeId","theme","useTheme","defaultChecked","onChange","icons","checked","unchecked","colProps","xxl","xl","lg","md","sm","xs","Header","useState","setUserId","isOpen","setIsOpen","handleChange","e","currentTarget","value","history","useHistory","handleEnter","push","location","collapseId","flexFlow","height","display","placeholder","onPressEnter","replace","disabled","onClick","isOpened","ratingColors","getRatingColorCode","getRatingColor","getRatingColorClass"],"mappings":"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","file":"static/js/1.8ba5478f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Tooltip } from \"antd\";\n\nimport TopcoderLikeCircle from \"./TopcoderLikeCircle\";\n\ninterface Props {\n  rating: number | undefined;\n}\n\nconst DifficultyCircle: React.FunctionComponent<Props> = (props) => {\n  if (props.rating === undefined) {\n    return (\n      <Tooltip title=\"Difficulty is unavailable.\" color=\"black\">\n        <span className=\"common-difficulty-circle difficulty-unavailable-circle\"></span>\n      </Tooltip>\n    );\n  }\n  return (\n    <Tooltip title={\"Difficulty :\" + String(props.rating)} color=\"black\">\n      <span>\n        <TopcoderLikeCircle rating={props.rating} />\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default DifficultyCircle;\n","import React from \"react\";\n\nfunction getColor(difficulty: number | undefined): string {\n  let color: string;\n\n  if (difficulty === undefined) {\n    color = \"black\";\n  } else if (difficulty < 1200) {\n    color = \"grey\";\n  } else if (difficulty < 1400) {\n    color = \"green\";\n  } else if (difficulty < 1600) {\n    color = \"cyan\";\n  } else if (difficulty < 1900) {\n    color = \"blue\";\n  } else if (difficulty < 2100) {\n    color = \"violet\";\n  } else if (difficulty < 2400) {\n    color = \"orange\";\n  } else if (difficulty < 2600) {\n    color = \"red\";\n  } else if (difficulty < 2900) {\n    color = \"bronze\";\n  } else if (difficulty < 3200) {\n    color = \"silver\";\n  } else {\n    color = \"gold\";\n  }\n\n  return color;\n}\n\nfunction getColorCode(difficulty: number): string {\n  let color: string;\n\n  if (difficulty < 1200) {\n    color = \"#808080\";\n  } else if (difficulty < 1400) {\n    color = \"#008000\";\n  } else if (difficulty < 1600) {\n    color = \"#03A89E\";\n  } else if (difficulty < 1900) {\n    color = \"#0000FF\";\n  } else if (difficulty < 2100) {\n    color = \"#AA00AA\";\n  } else if (difficulty < 2400) {\n    color = \"#FF8C00\";\n  } else if (difficulty < 2600) {\n    color = \"#FF0000\";\n  } else if (difficulty < 2900) {\n    color = \"#965C2C\";\n  } else if (difficulty < 3200) {\n    color = \"#808080\";\n  } else {\n    color = \"#FFD700\";\n  }\n\n  return color;\n}\n\nfunction calcFillRatio(difficulty: number): number {\n  let fillRatio: number = 0;\n\n  if (difficulty < 1200) {\n    fillRatio = difficulty / 1200;\n  } else if (difficulty < 1400) {\n    fillRatio = 1 - (1400 - difficulty) / 200;\n  } else if (difficulty < 1600) {\n    fillRatio = 1 - (1600 - difficulty) / 200;\n  } else if (difficulty < 1900) {\n    fillRatio = 1 - (1900 - difficulty) / 300;\n  } else if (difficulty < 2100) {\n    fillRatio = 1 - (2100 - difficulty) / 200;\n  } else if (difficulty < 2400) {\n    fillRatio = 1 - (2400 - difficulty) / 300;\n  } else if (difficulty < 2600) {\n    fillRatio = 1 - (2600 - difficulty) / 200;\n  } else {\n    fillRatio = 1.0;\n  }\n\n  return fillRatio;\n}\n\ninterface Props {\n  rating: number;\n  // optional props\n  big?: boolean;\n}\n\nconst TopcoderLikeCircle: React.FunctionComponent<Props> = (props) => {\n  const color = getColor(props.rating);\n\n  const colorCode = getColorCode(props.rating);\n  const fillRatio = calcFillRatio(props.rating);\n\n  const isMetal = color === \"bronze\" || color === \"silver\" || color === \"gold\";\n\n  let metalOption = {\n    base: \"\",\n    highlight: \"\",\n  };\n  if (color === \"bronze\") {\n    metalOption = { base: \"#965C2C\", highlight: \"#FFDABD\" };\n  }\n  if (color === \"silver\") {\n    metalOption = { base: \"#808080\", highlight: \"white\" };\n  }\n  if (color === \"gold\") {\n    metalOption = { base: \"#FFD700\", highlight: \"white\" };\n  }\n\n  const styles = isMetal\n    ? {\n        borderColor: colorCode,\n        background: `linear-gradient(to right, \\\n        ${metalOption.base}, ${metalOption.highlight}, ${metalOption.base}`,\n        color: colorCode,\n      }\n    : {\n        borderColor: colorCode,\n        borderStyle: \"solid\",\n        background: `linear-gradient(to top, \\\n        ${colorCode} 0%, \\\n        ${colorCode} ${fillRatio * 100}%, \\\n        rgba(0,0,0,0) ${fillRatio * 100}%, \\\n        rgba(0,0,0,0) 100%)`,\n        color: colorCode,\n      };\n  return (\n    <span\n     className={\n        props.big ? \"big-difficulty-circle\" : \"common-difficulty-circle\"\n      }\n      style={styles}\n    ></span>\n  );\n};\n\n// default Props\nTopcoderLikeCircle.defaultProps = {\n  big: false,\n};\n\nexport default TopcoderLikeCircle;\n","const STATIC_API_BASE_URL = \"https://codeforces.com/api\";\n\nlet CACHED_CONTESTS: any[];\nexport const cachedContestArray = () => {\n  if (CACHED_CONTESTS === undefined) {\n    CACHED_CONTESTS = require(\"./contests.json\");\n  }\n  return CACHED_CONTESTS;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst fetchProblems = async (url: string): Promise<any> => {\n  let tmp = new Map();\n  await fetch(url)\n    .then((res) => res.json())\n    .then((x) => {\n      let array = x.result.problems;\n      let mp = new Map();\n      array.reverse().forEach((element: any) => {\n        const contestId = element.contestId;\n        if (mp.has(contestId)) {\n          const prevArray = mp.get(contestId);\n          mp.set(contestId, [...prevArray, element]);\n        } else {\n          mp.set(contestId, [element]);\n        }\n      });\n      tmp = mp;\n    });\n  return tmp;\n};\n\nlet CACHED_PROBLEMS: any;\nexport const cachedProblemMap = async (): Promise<any> => {\n  if (CACHED_PROBLEMS === undefined) {\n    try {\n      CACHED_PROBLEMS = await fetchProblems(\n        STATIC_API_BASE_URL + \"/problemset.problems\"\n      );\n    } catch (e) {\n      // console.log(e);\n      CACHED_PROBLEMS = new Map();\n    }\n  }\n  return CACHED_PROBLEMS;\n};\n\nconst fetchUserSubmissions = async (url: string): Promise<any> => {\n  let tmp: any = [];\n  let isOk = true;\n  await fetch(url)\n    .then((res) => res.json())\n    .then((x) => {\n      tmp = x.result.filter((x: any) => x.verdict === \"OK\");\n    })\n    .catch((error) => {\n      console.log(\"Error: \", error.message);\n      isOk = false;\n    });\n\n  if (!isOk) {\n    return null;\n  }\n  let newMap: Map<string, boolean> = new Map();\n  tmp.forEach((x: any) => {\n    let t = String(x.problem.contestId) + x.problem.index;\n    newMap.set(t, true);\n  });\n\n  return newMap;\n};\n\nlet CACHED_USER_SUBMISSIONS: Map<string, any> = new Map();\nexport const cachedUserSubmissions = async (userId: string): Promise<any> => {\n  const prefixStr = \"https://codeforces.com/api/user.status?handle=\";\n  const url = prefixStr + userId;\n\n  if (CACHED_USER_SUBMISSIONS.get(userId) === undefined) {\n    try {\n      CACHED_USER_SUBMISSIONS.set(userId, await fetchUserSubmissions(url));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return CACHED_USER_SUBMISSIONS.get(userId);\n};\n\nconst fetchUserInfo = async (url: string): Promise<any> => {\n  let currentRating: number = 0;\n  let isUserExist: boolean = true;\n  let isError: boolean = false;\n\n  await fetch(url)\n    .then((res) => res.json())\n    .catch(() => {\n      isError = true;\n    })\n    .then((x) => {\n      if (x.status !== \"OK\") {\n        isUserExist = false;\n      }\n      currentRating = x.result[0].rating;\n    })\n    .catch((error) => {\n      console.log(\"Error: \", error.message);\n      return;\n    });\n\n  return {\n    isUserExist: isUserExist,\n    isError: isError,\n    userRating: currentRating,\n  };\n};\n\nlet CACHED_USER_INFO: Map<string, any> = new Map();\nexport const cachedUserInfo = async (userId: string): Promise<any> => {\n  if (CACHED_USER_INFO.get(userId) === undefined) {\n    try {\n      CACHED_USER_INFO.set(\n        userId,\n        await fetchUserInfo(\n          STATIC_API_BASE_URL + \"/user.info?handles=\" + userId\n        )\n      );\n    } catch (e) {\n      // console.log(e);\n      CACHED_PROBLEMS = new Map();\n    }\n  }\n  return CACHED_USER_INFO.get(userId);\n};\n","import React from \"react\";\nimport { Alert } from \"antd\";\n\nconst ErrorMessage: React.FunctionComponent = (props) => {\n  return <Alert message=\"Failure to fetch submissions data. Codeforces is down now or you may mistyped.\" type=\"error\" />;\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { MenuOutlined } from \"@ant-design/icons\";\n\nimport \"./Hamburger.css\";\n\nconst Hamburger: React.FunctionComponent = (props) => {\n  return (\n    <div id=\"hamburger-btn\">\n      <MenuOutlined />\n    </div>\n  );\n};\n\nexport default Hamburger;\n","import React from \"react\";\nimport \"./Logo.css\";\n\nimport { Link } from \"react-router-dom\";\n\nconst Logo: React.FunctionComponent = (props) => {\n  return (\n    <h1 id=\"logo\">\n      <Link to=\"/table\">\n        Codeforces Problems\n      </Link>\n    </h1>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\n\nimport Toggle from \"react-toggle\";\n\nimport \"react-toggle/style.css\";\nimport \"./ThemeToggler.css\";\n\nimport { ThemeContext, useTheme } from \"../ThemeProvider\";\n\nconst ThemeToggler = () => {\n  const [, setThemeId] = React.useContext(ThemeContext);\n  const theme = useTheme();\n\n  return (\n    <>\n      <div className=\"theme-toggler\">\n        <Toggle\n          defaultChecked={theme === \"dark\"}\n          onChange={() => {\n            setThemeId(theme === \"light\" ? \"dark\" : \"light\");\n          }}\n          icons={{\n            checked: <span className=\"toggle-icon\">🌜</span>,\n            unchecked: <span className=\"toggle-icon\">🌞</span>,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ThemeToggler;\n","import React from \"react\";\nimport Hamburger from \"./Hamburger\";\nimport Logo from \"./Logo\";\nimport ThemeToggler from \"./ThemeToggler\";\nimport { Row, Col } from \"antd\";\nimport { Input, Button } from \"antd\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { Collapse } from \"react-collapse\";\n\nimport \"./Header.css\";\nimport \"./InputBox.css\";\n\nconst colProps = [\n  {\n    xxl: 4,\n    xl: 5,\n    lg: 6,\n    md: 6,\n    sm: 8,\n    xs: 20,\n  },\n  {\n    xxl: 20,\n    xl: 19,\n    lg: 18,\n    md: 18,\n    sm: 16,\n    xs: 0,\n  },\n  {\n    xxl: 0,\n    xl: 0,\n    lg: 0,\n    md: 0,\n    sm: 0,\n    xs: 4,\n  },\n];\n\ninterface Props {\n  userId: string | undefined;\n  location: string;\n}\n\nconst Header: React.FunctionComponent<Props> = (props: Props) => {\n  const [userId, setUserId] = React.useState(props.userId);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setUserId(e.currentTarget.value);\n  };\n\n  let history = useHistory();\n\n  const handleEnter = (e: React.FormEvent<HTMLInputElement>) => {\n    history.push(\"/\" + props.location + \"/\" + userId);\n  };\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  let collapseId: string = isOpen\n    ? \"collapse-isOpen-true\"\n    : \"collapse-isOpen-false\";\n\n  return (\n    <div id=\"header\">\n      <Row style={{ flexFlow: \"nowrap\", height: 56 }}>\n        <Col {...colProps[0]}>\n          <Logo />\n        </Col>\n        <Col {...colProps[1]} className=\"menu-row\" style={{ display: \"flex\" }}>\n          <div id=\"input-box\">\n            <Input\n              placeholder=\"Codeforces ID\"\n              value={userId}\n              onChange={handleChange}\n              onPressEnter={handleEnter}\n            />\n            <Button>\n              <Link to={\"/table/\" + userId} replace>Table</Link>\n            </Button>\n            {userId === \"\" ? (\n              <Button disabled>\n                <Link to={\"/user/\" + userId} replace >User</Link>\n              </Button>\n            ) : (\n              <Button>\n                <Link to={\"/user/\" + userId} replace>User</Link>\n              </Button>\n            )}\n          </div>\n          <ThemeToggler />\n        </Col>\n        <Col {...colProps[2]}>\n          <div onClick={() => toggleIsOpen()}>\n            <Hamburger />\n          </div>\n        </Col>\n      </Row>\n      <Collapse isOpened={isOpen}>\n        <div className={collapseId}>\n          <div id=\"input-box\">\n            <Input\n              placeholder=\"Codeforces ID\"\n              value={userId}\n              onChange={handleChange}\n              onPressEnter={handleEnter}\n            />\n            <Button>\n              <Link to={\"/table/\" + userId} replace>Table</Link>\n            </Button>\n            {userId === \"\" ? (\n              <Button disabled>\n                <Link to={\"/user/\" + userId} replace>User</Link>\n              </Button>\n            ) : (\n              <Button>\n                <Link to={\"/user/\" + userId} replace>User</Link>\n              </Button>\n            )}\n          </div>\n          <ThemeToggler />\n        </div>\n      </Collapse>\n    </div>\n  );\n};\n\nexport default Header;\n","export type RatingColor =\n  | \"Black\"\n  | \"Grey\"\n  | \"Green\"\n  | \"Cyan\"\n  | \"Blue\"\n  | \"Violet\"\n  | \"Orange\"\n  | \"Red\";\n\nexport const ratingColors: RatingColor[] = [\n  \"Red\",\n  \"Orange\",\n  \"Violet\",\n  \"Blue\",\n  \"Cyan\",\n  \"Green\",\n  \"Grey\",\n  \"Black\",\n];\n\nexport const getRatingColorCode = (color: RatingColor): string => {\n  switch (color) {\n    case \"Black\":\n      return \"#000000\";\n    case \"Grey\":\n      return \"#808080\";\n    case \"Green\":\n      return \"#008000\";\n    case \"Cyan\":\n      return \"#03A89E\";\n    case \"Blue\":\n      return \"#0000FF\";\n    case \"Violet\":\n      return \"#AA00AA\";\n    case \"Orange\":\n      return \"#FF8C00\";\n    case \"Red\":\n      return \"#FF0000\";\n  }\n};\n\nexport const getRatingColor = (rating: number | undefined): RatingColor => {\n  let ratingColor: RatingColor;\n\n  if (rating === undefined) {\n    ratingColor = \"Black\";\n  } else if (rating < 1200) {\n    ratingColor = \"Grey\";\n  } else if (rating < 1400) {\n    ratingColor = \"Green\";\n  } else if (rating < 1600) {\n    ratingColor = \"Cyan\";\n  } else if (rating < 1900) {\n    ratingColor = \"Blue\";\n  } else if (rating < 2100) {\n    ratingColor = \"Violet\";\n  } else if (rating < 2400) {\n    ratingColor = \"Orange\";\n  } else {\n    ratingColor = \"Red\";\n  }\n\n  return ratingColor;\n};\n\nexport type RatingColorClassName =\n  | \"difficulty-black\"\n  | \"difficulty-grey\"\n  | \"difficulty-green\"\n  | \"difficulty-cyan\"\n  | \"difficulty-blue\"\n  | \"difficulty-violet\"\n  | \"difficulty-orange\"\n  | \"difficulty-red\";\n\nexport const getRatingColorClass = (\n  rating: number | undefined\n): RatingColorClassName => {\n  const ratingColor: RatingColor = getRatingColor(rating);\n  switch (ratingColor) {\n    case \"Black\":\n      return \"difficulty-black\";\n    case \"Grey\":\n      return \"difficulty-grey\";\n    case \"Green\":\n      return \"difficulty-green\";\n    case \"Cyan\":\n      return \"difficulty-cyan\";\n    case \"Blue\":\n      return \"difficulty-blue\";\n    case \"Violet\":\n      return \"difficulty-violet\";\n    case \"Orange\":\n      return \"difficulty-orange\";\n    case \"Red\":\n      return \"difficulty-red\";\n  }\n};\n"],"sourceRoot":""}