{"version":3,"sources":["reportWebVitals.ts","utils/localStorage.ts","components/ThemeProvider.tsx","components/Header/Hamburger.tsx","components/Header/Logo.tsx","components/Header/ThemeToggler.tsx","components/Header/Header.tsx","components/TopcoderLikeCircle.tsx","utils/TypedCachedApiClient.ts","components/DifficultyCircle.tsx","utils/colors.ts","pages/TablePage/contestTableUtils.tsx","pages/TablePage/ErrorMessage.tsx","pages/TablePage/ContestTable.tsx","pages/TablePage/TableTab.tsx","pages/TablePage/index.tsx","pages/UserPage/UserNotFound.tsx","pages/UserPage/Loading.tsx","pages/UserPage/UserNameLabel.tsx","pages/UserPage/Achievement.tsx","utils/formatDate.ts","pages/UserPage/SubmissionListTable.tsx","pages/UserPage/CustomTooltip.tsx","pages/UserPage/Climbing.tsx","pages/UserPage/Heatmap.tsx","pages/UserPage/makeSolvedHistory.ts","pages/UserPage/makeSubmissionHistory.ts","pages/UserPage/userUtils.ts","pages/UserPage/index.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useLocalStorage","key","defaultValue","a","localStorage","getItem","React","useState","JSON","parse","value","setValue","useEffect","setItem","stringify","ThemeContext","createContext","Error","useTheme","useContext","ThemeProvider","props","themeId","setThemeId","Provider","Helmet","className","children","Hamburger","id","MenuOutlined","Logo","to","ThemeToggler","theme","defaultChecked","onChange","icons","checked","unchecked","colProps","xxl","xl","lg","md","sm","xs","Header","userId","setUserId","isOpen","setIsOpen","handleChange","e","currentTarget","history","useHistory","handleEnter","push","location","collapseId","style","flexFlow","height","display","placeholder","onPressEnter","replace","disabled","onClick","isOpened","TopcoderLikeCircle","difficulty","color","undefined","rating","colorCode","getColorCode","fillRatio","calcFillRatio","metalOption","base","highlight","styles","borderColor","background","borderStyle","big","defaultProps","CACHED_CONTESTS","DifficultyCircle","title","String","ratingColors","getRatingColorCode","getRatingColor","getRatingColorClass","makeColumns","n","res","dataIndex","render","text","i","alp","fromCharCode","PREFIX","filterProblemsMap","Map","STATIC_API_BASE_URL","fetchUserSubmissions","url","tmp","isOk","fetch","json","x","result","filter","verdict","catch","error","console","log","message","newMap","forEach","t","problem","contestId","index","set","CACHED_USER_SUBMISSIONS","cachedUserSubmissions","get","fetchUserInfo","currentRating","isUserExist","isError","status","userRating","CACHED_USER_INFO","cachedUserInfo","ErrorMessage","type","ContestTable","isFetchFailue","setIsFetchFailue","acList","setAcList","isMounted","Promise","all","userSubmission","getUserSubmissions","allProblems","require","contestTable","problemData","isShowDifficulty","map","obj","contestName","name","problems","mp","cnt","contestClassName","href","rel","target","ratingColorClass","problemId","problemName","classOK","classNA","makeContestTable","filterProblems","columns","contest","columnNum","makeContestColumns","Fragment","pagination","defaultPageSize","pageSizeOptions","bordered","dataSource","TableTabButtons","setContest","setIsShowDifficulty","size","Group","Button","TablePage","TableTab","UserNotFound","Loading","UserNameLabel","c","userRatingCircle","badge","count","backgroundColor","Achievement","gutter","solvedCountAll","solvedCountLastYear","solvedCountLastMonth","longestStreak","currentStreak","streakSum","formatFullDate","dateSecond","date","Date","yyyy","getFullYear","mm","getMonth","padStart","dd","getDate","hh","getHours","min","getMinutes","sec","getSeconds","formatDate","SubmissionListTable","submission","submissionSecond","creationTimeSeconds","difficultyCircle","problemIndex","submissionUrl","submissionId","problemUrl","programmingLanguage","detail","CustomTooltip","active","payload","label","margin","padding","border","whiteSpace","paddingTop","paddingBottom","reduce","acc","entry","marginTop","marginBottom","slice","reverse","dataKey","ClimbingChart","ResponsiveContainer","width","AreaChart","data","solvedHistory","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","domain","tickFormatter","YAxis","Tooltip","content","ratingColor","Area","isAnimationActive","stackId","stroke","fill","Climbing","Customtooltip","borderRadius","textAlign","day","MyResponsiveCalendar","from","year","emptyColor","colors","minValue","textColor","yearSpacing","dayBorderWidth","dayBorderColor","monthBorderWidth","tooltip","legends","anchor","direction","translateY","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","Heatmap","yearsSet","Set","add","years","Array","selectYear","setSelectYear","length","Option","makeSolvedHistory","cntRed","cntOrange","cntViolet","cntBlue","cntCyan","cntGreen","cntGrey","cntOther","isSolved","revSubmission","newRevSubmission","p","numSubmission","dateFormat","Red","Orange","Violet","Blue","Cyan","Green","Grey","Other","makeSubmissionHistory","submissionHistory","fetchUserSubmission","makeAchievementData","isSolvedDay","today","month","cntSolveLastYear","cntSolveLastMonth","uniqDaySubmissions","time","formatted","getTime","cntCurrentStreak","tmpTime","cntLongestStreak","Math","max","User","setIsError","setIsUserExist","isLoading","setIsLoading","setUserRating","setUserSubmission","userInfo","setUserInfo","str","submissions","getUserInfo","element","App","path","params","match","userIds","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b08533f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nexport const useLocalStorage = <T>(key: string, defaultValue: T) => {\n  const a = localStorage.getItem(key);\n  const [value, setValue] = React.useState(a ? JSON.parse(a) : defaultValue);\n\n  React.useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, key]);\n\n  return [value, setValue];\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocalStorage } from \"../utils/localStorage\";\n\ntype ThemeId = \"light\" | \"dark\" | \"purple\";\ntype ThemeContextProps = [ThemeId, (newThemeId: ThemeId) => void];\n\nexport const ThemeContext = React.createContext<ThemeContextProps>([\n  \"light\",\n  (): void => {\n    throw new Error(\"setThemeId is not implemented.\");\n  },\n]);\n\ninterface ThemeProviderProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = (\n  props: ThemeProviderProps\n) => {\n  const [themeId, setThemeId] = useLocalStorage<string>(\"theme\", \"light\");\n\n  return (\n    <ThemeContext.Provider value={[themeId, setThemeId]}>\n      <Helmet>\n        <html className={`theme-${themeId}`} />\n      </Helmet>\n\n      {props.children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const [themeId] = React.useContext(ThemeContext);\n\n  return themeId;\n};\n\nexport default ThemeProvider;\n","import React from \"react\";\nimport { MenuOutlined } from \"@ant-design/icons\";\n\nimport \"./Hamburger.css\";\n\nconst Hamburger: React.FunctionComponent = (props) => {\n  return (\n    <div id=\"hamburger-btn\">\n      <MenuOutlined />\n    </div>\n  );\n};\n\nexport default Hamburger;\n","import React from \"react\";\nimport \"./Logo.css\";\n\nimport { Link } from \"react-router-dom\";\n\nconst Logo: React.FunctionComponent = (props) => {\n  return (\n    <h1 id=\"logo\">\n      <Link to=\"/table\">\n        Codeforces Problems\n      </Link>\n    </h1>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\n\nimport Toggle from \"react-toggle\";\n\nimport \"react-toggle/style.css\";\nimport \"./ThemeToggler.css\";\n\nimport { ThemeContext, useTheme } from \"../ThemeProvider\";\n\nconst ThemeToggler = () => {\n  const [, setThemeId] = React.useContext(ThemeContext);\n  const theme = useTheme();\n\n  return (\n    <>\n      <div className=\"theme-toggler\">\n        <Toggle\n          defaultChecked={theme === \"dark\"}\n          onChange={() => {\n            setThemeId(theme === \"light\" ? \"dark\" : \"light\");\n          }}\n          icons={{\n            checked: <span className=\"toggle-icon\">🌜</span>,\n            unchecked: <span className=\"toggle-icon\">🌞</span>,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ThemeToggler;\n","import React from \"react\";\nimport Hamburger from \"./Hamburger\";\nimport Logo from \"./Logo\";\nimport ThemeToggler from \"./ThemeToggler\";\nimport { Row, Col } from \"antd\";\nimport { Input, Button } from \"antd\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { Collapse } from \"react-collapse\";\n\nimport \"./Header.css\";\nimport \"./InputBox.css\";\n\nconst colProps = [\n  {\n    xxl: 4,\n    xl: 5,\n    lg: 6,\n    md: 6,\n    sm: 8,\n    xs: 20,\n  },\n  {\n    xxl: 20,\n    xl: 19,\n    lg: 18,\n    md: 18,\n    sm: 16,\n    xs: 0,\n  },\n  {\n    xxl: 0,\n    xl: 0,\n    lg: 0,\n    md: 0,\n    sm: 0,\n    xs: 4,\n  },\n];\n\ninterface Props {\n  userId: string | undefined;\n  location: string;\n}\n\nconst Header: React.FunctionComponent<Props> = (props: Props) => {\n  const [userId, setUserId] = React.useState(props.userId);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setUserId(e.currentTarget.value);\n  };\n\n  let history = useHistory();\n\n  const handleEnter = (e: React.FormEvent<HTMLInputElement>) => {\n    history.push(\"/\" + props.location + \"/\" + userId);\n  };\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  let collapseId: string = isOpen\n    ? \"collapse-isOpen-true\"\n    : \"collapse-isOpen-false\";\n\n  return (\n    <div id=\"header\">\n      <Row style={{ flexFlow: \"nowrap\", height: 56 }}>\n        <Col {...colProps[0]}>\n          <Logo />\n        </Col>\n        <Col {...colProps[1]} className=\"menu-row\" style={{ display: \"flex\" }}>\n          <div id=\"input-box\">\n            <Input\n              placeholder=\"Codeforces ID\"\n              value={userId}\n              onChange={handleChange}\n              onPressEnter={handleEnter}\n            />\n            <Button>\n              <Link to={\"/table/\" + userId} replace>Table</Link>\n            </Button>\n            {userId === \"\" ? (\n              <Button disabled>\n                <Link to={\"/user/\" + userId} replace >User</Link>\n              </Button>\n            ) : (\n              <Button>\n                <Link to={\"/user/\" + userId} replace>User</Link>\n              </Button>\n            )}\n          </div>\n          <ThemeToggler />\n        </Col>\n        <Col {...colProps[2]}>\n          <div onClick={() => toggleIsOpen()}>\n            <Hamburger />\n          </div>\n        </Col>\n      </Row>\n      <Collapse isOpened={isOpen}>\n        <div className={collapseId}>\n          <div id=\"input-box\">\n            <Input\n              placeholder=\"Codeforces ID\"\n              value={userId}\n              onChange={handleChange}\n              onPressEnter={handleEnter}\n            />\n            <Button>\n              <Link to={\"/table/\" + userId} replace>Table</Link>\n            </Button>\n            {userId === \"\" ? (\n              <Button disabled>\n                <Link to={\"/user/\" + userId} replace>User</Link>\n              </Button>\n            ) : (\n              <Button>\n                <Link to={\"/user/\" + userId} replace>User</Link>\n              </Button>\n            )}\n          </div>\n          <ThemeToggler />\n        </div>\n      </Collapse>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nfunction getColor(difficulty: number | undefined): string {\n  let color: string;\n\n  if (difficulty === undefined) {\n    color = \"black\";\n  } else if (difficulty < 1200) {\n    color = \"grey\";\n  } else if (difficulty < 1400) {\n    color = \"green\";\n  } else if (difficulty < 1600) {\n    color = \"cyan\";\n  } else if (difficulty < 1900) {\n    color = \"blue\";\n  } else if (difficulty < 2100) {\n    color = \"violet\";\n  } else if (difficulty < 2400) {\n    color = \"orange\";\n  } else if (difficulty < 2600) {\n    color = \"red\";\n  } else if (difficulty < 2900) {\n    color = \"bronze\";\n  } else if (difficulty < 3200) {\n    color = \"silver\";\n  } else {\n    color = \"gold\";\n  }\n\n  return color;\n}\n\nfunction getColorCode(difficulty: number): string {\n  let color: string;\n\n  if (difficulty < 1200) {\n    color = \"#808080\";\n  } else if (difficulty < 1400) {\n    color = \"#008000\";\n  } else if (difficulty < 1600) {\n    color = \"#03A89E\";\n  } else if (difficulty < 1900) {\n    color = \"#0000FF\";\n  } else if (difficulty < 2100) {\n    color = \"#AA00AA\";\n  } else if (difficulty < 2400) {\n    color = \"#FF8C00\";\n  } else if (difficulty < 2600) {\n    color = \"#FF0000\";\n  } else if (difficulty < 2900) {\n    color = \"#965C2C\";\n  } else if (difficulty < 3200) {\n    color = \"#808080\";\n  } else {\n    color = \"#FFD700\";\n  }\n\n  return color;\n}\n\nfunction calcFillRatio(difficulty: number): number {\n  let fillRatio: number = 0;\n\n  if (difficulty < 1200) {\n    fillRatio = difficulty / 1200;\n  } else if (difficulty < 1400) {\n    fillRatio = 1 - (1400 - difficulty) / 200;\n  } else if (difficulty < 1600) {\n    fillRatio = 1 - (1600 - difficulty) / 200;\n  } else if (difficulty < 1900) {\n    fillRatio = 1 - (1900 - difficulty) / 300;\n  } else if (difficulty < 2100) {\n    fillRatio = 1 - (2100 - difficulty) / 200;\n  } else if (difficulty < 2400) {\n    fillRatio = 1 - (2400 - difficulty) / 300;\n  } else if (difficulty < 2600) {\n    fillRatio = 1 - (2600 - difficulty) / 200;\n  } else {\n    fillRatio = 1.0;\n  }\n\n  return fillRatio;\n}\n\ninterface Props {\n  rating: number;\n  // optional props\n  big?: boolean;\n}\n\nconst TopcoderLikeCircle: React.FunctionComponent<Props> = (props) => {\n  const color = getColor(props.rating);\n\n  const colorCode = getColorCode(props.rating);\n  const fillRatio = calcFillRatio(props.rating);\n\n  const isMetal = color === \"bronze\" || color === \"silver\" || color === \"gold\";\n\n  let metalOption = {\n    base: \"\",\n    highlight: \"\",\n  };\n  if (color === \"bronze\") {\n    metalOption = { base: \"#965C2C\", highlight: \"#FFDABD\" };\n  }\n  if (color === \"silver\") {\n    metalOption = { base: \"#808080\", highlight: \"white\" };\n  }\n  if (color === \"gold\") {\n    metalOption = { base: \"#FFD700\", highlight: \"white\" };\n  }\n\n  const styles = isMetal\n    ? {\n        borderColor: colorCode,\n        background: `linear-gradient(to right, \\\n        ${metalOption.base}, ${metalOption.highlight}, ${metalOption.base}`,\n        color: colorCode,\n      }\n    : {\n        borderColor: colorCode,\n        borderStyle: \"solid\",\n        background: `linear-gradient(to top, \\\n        ${colorCode} 0%, \\\n        ${colorCode} ${fillRatio * 100}%, \\\n        rgba(0,0,0,0) ${fillRatio * 100}%, \\\n        rgba(0,0,0,0) 100%)`,\n        color: colorCode,\n      };\n  return (\n    <span\n     className={\n        props.big ? \"big-difficulty-circle\" : \"common-difficulty-circle\"\n      }\n      style={styles}\n    ></span>\n  );\n};\n\n// default Props\nTopcoderLikeCircle.defaultProps = {\n  big: false,\n};\n\nexport default TopcoderLikeCircle;\n","const STATIC_API_BASE_URL = \"https://codeforces.com/api\";\n\nlet CACHED_CONTESTS: any[];\nexport const cachedContestArray = () => {\n  if (CACHED_CONTESTS === undefined) {\n    CACHED_CONTESTS = require(\"./contests.json\");\n  }\n  return CACHED_CONTESTS;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst fetchProblems = async (url: string): Promise<any> => {\n  let tmp = new Map();\n  await fetch(url)\n    .then((res) => res.json())\n    .then((x) => {\n      let array = x.result.problems;\n      let mp = new Map();\n      array.reverse().forEach((element: any) => {\n        const contestId = element.contestId;\n        if (mp.has(contestId)) {\n          const prevArray = mp.get(contestId);\n          mp.set(contestId, [...prevArray, element]);\n        } else {\n          mp.set(contestId, [element]);\n        }\n      });\n      tmp = mp;\n    });\n  return tmp;\n};\n\nlet CACHED_PROBLEMS: any;\nexport const cachedProblemMap = async (): Promise<any> => {\n  if (CACHED_PROBLEMS === undefined) {\n    try {\n      CACHED_PROBLEMS = await fetchProblems(\n        STATIC_API_BASE_URL + \"/problemset.problems\"\n      );\n    } catch (e) {\n      // console.log(e);\n      CACHED_PROBLEMS = new Map();\n    }\n  }\n  return CACHED_PROBLEMS;\n};\n\nconst fetchUserSubmissions = async (url: string): Promise<any> => {\n  let tmp: any = [];\n  let isOk = true;\n  await fetch(url)\n    .then((res) => res.json())\n    .then((x) => {\n      tmp = x.result.filter((x: any) => x.verdict === \"OK\");\n    })\n    .catch((error) => {\n      console.log(\"Error: \", error.message);\n      isOk = false;\n    });\n\n  if (!isOk) {\n    return null;\n  }\n  let newMap: Map<string, boolean> = new Map();\n  tmp.forEach((x: any) => {\n    let t = String(x.problem.contestId) + x.problem.index;\n    newMap.set(t, true);\n  });\n\n  return newMap;\n};\n\nlet CACHED_USER_SUBMISSIONS: Map<string, any> = new Map();\nexport const cachedUserSubmissions = async (userId: string): Promise<any> => {\n  const prefixStr = \"https://codeforces.com/api/user.status?handle=\";\n  const url = prefixStr + userId;\n\n  if (CACHED_USER_SUBMISSIONS.get(userId) === undefined) {\n    try {\n      CACHED_USER_SUBMISSIONS.set(userId, await fetchUserSubmissions(url));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return CACHED_USER_SUBMISSIONS.get(userId);\n};\n\nconst fetchUserInfo = async (url: string): Promise<any> => {\n  let currentRating: number = 0;\n  let isUserExist: boolean = true;\n  let isError: boolean = false;\n\n  await fetch(url)\n    .then((res) => res.json())\n    .catch(() => {\n      isError = true;\n    })\n    .then((x) => {\n      if (x.status !== \"OK\") {\n        isUserExist = false;\n      }\n      currentRating = x.result[0].rating;\n    })\n    .catch((error) => {\n      console.log(\"Error: \", error.message);\n      return;\n    });\n\n  return {\n    isUserExist: isUserExist,\n    isError: isError,\n    userRating: currentRating,\n  };\n};\n\nlet CACHED_USER_INFO: Map<string, any> = new Map();\nexport const cachedUserInfo = async (userId: string): Promise<any> => {\n  if (CACHED_USER_INFO.get(userId) === undefined) {\n    try {\n      CACHED_USER_INFO.set(\n        userId,\n        await fetchUserInfo(\n          STATIC_API_BASE_URL + \"/user.info?handles=\" + userId\n        )\n      );\n    } catch (e) {\n      // console.log(e);\n      CACHED_PROBLEMS = new Map();\n    }\n  }\n  return CACHED_USER_INFO.get(userId);\n};\n","import React from \"react\";\nimport { Tooltip } from \"antd\";\n\nimport TopcoderLikeCircle from \"./TopcoderLikeCircle\";\n\ninterface Props {\n  rating: number | undefined;\n}\n\nconst DifficultyCircle: React.FunctionComponent<Props> = (props) => {\n  if (props.rating === undefined) {\n    return (\n      <Tooltip title=\"Difficulty is unavailable.\" color=\"black\">\n        <span className=\"common-difficulty-circle difficulty-unavailable-circle\"></span>\n      </Tooltip>\n    );\n  }\n  return (\n    <Tooltip title={\"Difficulty :\" + String(props.rating)} color=\"black\">\n      <span>\n        <TopcoderLikeCircle rating={props.rating} />\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default DifficultyCircle;\n","export type RatingColor =\n  | \"Black\"\n  | \"Grey\"\n  | \"Green\"\n  | \"Cyan\"\n  | \"Blue\"\n  | \"Violet\"\n  | \"Orange\"\n  | \"Red\";\n\nexport const ratingColors: RatingColor[] = [\n  \"Red\",\n  \"Orange\",\n  \"Violet\",\n  \"Blue\",\n  \"Cyan\",\n  \"Green\",\n  \"Grey\",\n  \"Black\",\n];\n\nexport const getRatingColorCode = (color: RatingColor): string => {\n  switch (color) {\n    case \"Black\":\n      return \"#000000\";\n    case \"Grey\":\n      return \"#808080\";\n    case \"Green\":\n      return \"#008000\";\n    case \"Cyan\":\n      return \"#03A89E\";\n    case \"Blue\":\n      return \"#0000FF\";\n    case \"Violet\":\n      return \"#AA00AA\";\n    case \"Orange\":\n      return \"#FF8C00\";\n    case \"Red\":\n      return \"#FF0000\";\n  }\n};\n\nexport const getRatingColor = (rating: number | undefined): RatingColor => {\n  let ratingColor: RatingColor;\n\n  if (rating === undefined) {\n    ratingColor = \"Black\";\n  } else if (rating < 1200) {\n    ratingColor = \"Grey\";\n  } else if (rating < 1400) {\n    ratingColor = \"Green\";\n  } else if (rating < 1600) {\n    ratingColor = \"Cyan\";\n  } else if (rating < 1900) {\n    ratingColor = \"Blue\";\n  } else if (rating < 2100) {\n    ratingColor = \"Violet\";\n  } else if (rating < 2400) {\n    ratingColor = \"Orange\";\n  } else {\n    ratingColor = \"Red\";\n  }\n\n  return ratingColor;\n};\n\nexport type RatingColorClassName =\n  | \"difficulty-black\"\n  | \"difficulty-grey\"\n  | \"difficulty-green\"\n  | \"difficulty-cyan\"\n  | \"difficulty-blue\"\n  | \"difficulty-violet\"\n  | \"difficulty-orange\"\n  | \"difficulty-red\";\n\nexport const getRatingColorClass = (\n  rating: number | undefined\n): RatingColorClassName => {\n  const ratingColor: RatingColor = getRatingColor(rating);\n  switch (ratingColor) {\n    case \"Black\":\n      return \"difficulty-black\";\n    case \"Grey\":\n      return \"difficulty-grey\";\n    case \"Green\":\n      return \"difficulty-green\";\n    case \"Cyan\":\n      return \"difficulty-cyan\";\n    case \"Blue\":\n      return \"difficulty-blue\";\n    case \"Violet\":\n      return \"difficulty-violet\";\n    case \"Orange\":\n      return \"difficulty-orange\";\n    case \"Red\":\n      return \"difficulty-red\";\n  }\n};\n","import React from \"react\";\nimport DifficultyCircle from \"../../components/DifficultyCircle\";\n\nimport { getRatingColorClass } from \"../../utils/colors\";\n\nexport const makeColumns = (n: number) => {\n  let res = [\n    {\n      title: \"Contest\",\n      dataIndex: \"name\",\n      render: (text: string) => text,\n    },\n  ];\n  for (let i = 0; i < n; i++) {\n    const alp: string = String.fromCharCode(65 + i);\n    res.push({\n      title: alp,\n      dataIndex: alp,\n      render: (text: string) => text,\n    });\n  }\n  return res;\n};\n\nexport const makeContestColumns = (contest: string) => {\n  let columnNum: number = 9;\n\n  switch (contest) {\n    case \"Educational Codeforces Rounds\":\n      columnNum = 9;\n      break;\n    case \"Codeforces Global Rounds\":\n      columnNum = 9;\n      break;\n    case \"Div. 1 + Div. 2 Contests\":\n      columnNum = 8;\n      break;\n    case \"Div. 1 Contests\":\n      columnNum = 7;\n      break;\n    case \"Div. 2 Contests\":\n      columnNum = 8;\n      break;\n    case \"Div. 3 Contests\":\n      columnNum = 8;\n      break;\n    case \"Div. 4 Contests\":\n      columnNum = 7;\n      break;\n    case \"ICPC\":\n      columnNum = 14;\n      break;\n    case \"Kotlin Heroes\":\n      columnNum = 10;\n      break;\n    case \"Q#\":\n      columnNum = 9;\n      break;\n    case \"Other Contests\":\n      columnNum = 15;\n      break;\n    case \"All Contests\":\n      columnNum = 14;\n      break;\n  }\n\n  let columns = makeColumns(columnNum);\n\n  if (contest === \"Microsoft Q# Coding Contests\") {\n    columns = [\n      ...makeColumns(9),\n      {\n        title: \"U\",\n        dataIndex: \"U\",\n        render: (text: string) => text,\n      },\n    ];\n  }\n  return columns;\n};\n\nconst PREFIX = \"https://codeforces.com/contest/\";\n\nexport const makeContestTable = (\n  problemData: object[],\n  isShowDifficulty: boolean,\n  acList: Map<string, boolean>\n) => {\n  return problemData.map((x: any) => {\n    let obj: any = {};\n    let contestId = x.id;\n    let contestName = x.name;\n    let problems = x.problems;\n\n    let isOk: boolean = problems !== null ? true : false;\n\n    let mp: Map<string, number> = new Map();\n\n    if (problems !== null) {\n      problems.forEach((e: any) => {\n        const t = acList!.get(String(x.id) + String(e.index));\n        isOk = isOk && (t === undefined ? false : true);\n\n        let cnt = mp.get(e.index[0]);\n        if (cnt === undefined) {\n          cnt = 1;\n        } else {\n          cnt++;\n        }\n        mp.set(e.index[0], cnt);\n      });\n    }\n\n    const contestClassName = isOk ? \"cell-element OK\" : \"cell-element\";\n\n    obj[\"name\"] = (\n      <div className={contestClassName}>\n        <a\n          href={PREFIX + String(contestId)}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          {contestName}\n        </a>\n      </div>\n    );\n\n    if (problems === null) {\n      return obj;\n    }\n\n    problems.forEach((e: any) => {\n      const ratingColorClass = isShowDifficulty\n        ? getRatingColorClass(e.rating)\n        : \"difficulty-black\";\n      const problemId: string = e.index;\n      const problemName: string = e.name;\n\n      let isOk: boolean = true;\n      const tmp = acList!.get(contestId + problemId);\n      isOk = isOk && (tmp === undefined ? false : true);\n\n      let classOK = \"cell-element OK-\" + String(mp.get(e.index[0]));\n      let classNA = \"cell-element NA-\" + String(mp.get(e.index[0]));\n      // let classNG = \"cell-element NG\" + \"-\" + String(mp.get(e.index[0]));\n\n      const className = isOk ? classOK : classNA;\n\n      obj[problemId[0]] = (\n        <>\n          {obj[problemId[0]] !== undefined ? (\n            <>\n              {obj[problemId[0]]}\n              <div className={className}>\n                {isShowDifficulty && <DifficultyCircle rating={e.rating} />}\n                <a\n                  href={PREFIX + String(x.id) + \"/problem/\" + e.index}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  className={ratingColorClass}\n                >\n                  {String(e.index) + \". \" + problemName}\n                </a>\n              </div>\n            </>\n          ) : (\n            <div className={className}>\n              {isShowDifficulty && <DifficultyCircle rating={e.rating} />}\n              <a\n                href={PREFIX + String(x.id) + \"/problem/\" + e.index}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                className={ratingColorClass}\n              >\n                {String(e.index) + \". \" + problemName}\n              </a>\n            </div>\n          )}\n        </>\n      );\n    });\n    return obj;\n  });\n};\n\nlet filterProblemsMap : Map<string, object[]> = new Map();\n\nexport const filterProblems = (\n  contestName: string,\n  allProblems: object[]\n): object[] => {\n  let problemData;\n\n  let a = filterProblemsMap.get(contestName);\n  if (a !== undefined) {\n    return a;\n  }\n\n  if (contestName === \"All Contests\") {\n    problemData = allProblems;\n    filterProblemsMap.set(\"All Contests\", problemData)\n  } else if (contestName === \"Educational Codeforces Rounds\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Educational\";\n    });\n    filterProblemsMap.set(\"Educational Codeforces Rounds\", problemData)\n  } else if (contestName === \"Codeforces Global Rounds\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Global\";\n    });\n    filterProblemsMap.set(\"Codeforces Global Rounds\", problemData)\n  } else if (contestName === \"Div. 1 + Div. 2 Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Div1 + Div2\";\n    });\n    filterProblemsMap.set(\"Div. 1 + Div. 2 Contests\", problemData)\n  } else if (contestName === \"Div. 1 Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Div1\";\n    });\n    filterProblemsMap.set(\"Div. 1 Contests\", problemData)\n  } else if (contestName === \"Div. 2 Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Div2\";\n    });\n    filterProblemsMap.set(\"Div. 2 Contests\", problemData)\n  } else if (contestName === \"Div. 3 Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Div3\";\n    });\n    filterProblemsMap.set(\"Div. 3 Contests\", problemData)\n  } else if (contestName === \"Div. 4 Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Div4\";\n    });\n    filterProblemsMap.set(\"Div. 4 Contests\", problemData)\n  } else if (contestName === \"Kotlin Heroes\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Kotlin\";\n    });\n    filterProblemsMap.set(\"Kotlin Heroes\", problemData)\n  } else if (contestName === \"ICPC\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"ICPC\";\n    });\n    filterProblemsMap.set(\"ICPC\", problemData)\n  } else if (contestName === \"Microsoft Q# Coding Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Q#\";\n    });\n    filterProblemsMap.set(\"Microsoft Q# Coding Contests\", problemData)\n  } else if (contestName === \"Other Contests\") {\n    problemData = allProblems.filter((obj: any) => {\n      return obj.type === \"Other\";\n    });\n    filterProblemsMap.set(\"Other Contests\", problemData)\n  }\n\n  if (problemData !== undefined) {\n    return problemData;\n  } else {\n    return [];\n  }\n};\n","import React from \"react\";\nimport { Alert } from \"antd\";\n\nconst ErrorMessage: React.FunctionComponent = (props) => {\n  return <Alert message=\"Failure to fetch submissions data. Codeforces is down now or you may mistyped.\" type=\"error\" />;\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nimport {\n  makeContestColumns,\n  makeContestTable,\n  filterProblems\n} from \"./contestTableUtils\";\n\nimport {\n  cachedUserSubmissions ,\n  cachedContestArray,\n} from \"../../utils/TypedCachedApiClient\";\n\nimport ErrorMessage from \"./ErrorMessage\";\n\ninterface ContestTableProps {\n  name: string;\n  isShowDifficulty: boolean;\n  userId: string | undefined;\n}\n\nconst ContestTable: React.FC<ContestTableProps> = (props) => {\n  const [isFetchFailue, setIsFetchFailue] = React.useState(false);\n  const [acList, setAcList] = React.useState(new Map());\n\n  React.useEffect(() => {\n    let isMounted = true;\n    if (props.userId === undefined || props.userId === \"\") {\n      if (isMounted) {\n        setAcList(new Map());\n      }\n      return;\n    }\n\n    const getUserSubmissions = async () => {\n      const [userSubmission] = await Promise.all([\n        cachedUserSubmissions(String(props.userId)),\n      ]);\n\n      if (isMounted) {\n        if (userSubmission === null) {\n          setIsFetchFailue(true);\n          setAcList(new Map());\n        } else {\n          setIsFetchFailue(false);\n          setAcList(userSubmission);\n        }\n      }\n    };\n\n    void getUserSubmissions();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [props.userId]);\n\n  const allProblems = cachedContestArray();\n  let problemData = filterProblems(props.name, allProblems);\n\n  let contestTable = makeContestTable(problemData, props.isShowDifficulty, acList);\n\n  const columns = makeContestColumns(props.name);\n\n  return (\n    <React.Fragment>\n      <h2>{props.name}</h2>\n      {isFetchFailue && <ErrorMessage />}\n      <Table\n        pagination={{\n          defaultPageSize: 50,\n          pageSizeOptions: [\"10\", \"20\", \"50\", \"100\"],\n        }}\n        bordered\n        className=\"ant-contest-table\"\n        columns={columns}\n        dataSource={contestTable}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default ContestTable;\n","import React from \"react\";\n\nimport { Radio, Switch } from \"antd\";\n\nimport ContestTable from \"./ContestTable\";\nimport { useLocalStorage } from \"../../utils/localStorage\";\n\ninterface Props {\n  userId: string | undefined;\n}\n\nconst TableTabButtons: React.FunctionComponent<Props> = (props: Props) => {\n  const [contest, setContest] = useLocalStorage(\n    \"activeTab\",\n    \"Educational Codeforces Rounds\"\n  );\n\n  const [isShowDifficulty, setIsShowDifficulty] = useLocalStorage(\n    \"isShowDifficulty\",\n    true\n  );\n\n  return (\n    <React.Fragment>\n      <div>\n        <div className=\"show-diff-btn\">\n          {isShowDifficulty ? (\n            <Switch\n              size=\"small\"\n              defaultChecked\n              onChange={(e) => {\n                setIsShowDifficulty(!isShowDifficulty);\n              }}\n            />\n          ) : (\n            <Switch\n              size=\"small\"\n              onChange={(e) => {\n                setIsShowDifficulty(!isShowDifficulty);\n              }}\n            />\n          )}\n        </div>\n        <label className=\"show-diff-btn\">Show Difficulty</label>\n      </div>\n\n      <Radio.Group\n        value={contest}\n        id=\"radio-buttons\"\n        size=\"large\"\n        onChange={(e) => {\n          setContest(e.target.value);\n        }}\n      >\n        <Radio.Button value=\"Educational Codeforces Rounds\">\n          Educational\n        </Radio.Button>\n        <Radio.Button value=\"Codeforces Global Rounds\">Global</Radio.Button>\n        <Radio.Button value=\"Div. 1 + Div. 2 Contests\">\n          Div1 + Div2\n        </Radio.Button>\n        <Radio.Button value=\"Div. 1 Contests\">Div1</Radio.Button>\n        <Radio.Button value=\"Div. 2 Contests\">Div2</Radio.Button>\n        <Radio.Button value=\"Div. 3 Contests\">Div3</Radio.Button>\n        <Radio.Button value=\"Div. 4 Contests\">Div4</Radio.Button>\n        <Radio.Button value=\"ICPC\">ICPC</Radio.Button>\n        <Radio.Button value=\"Kotlin Heroes\">Kotlin</Radio.Button>\n        <Radio.Button value=\"Microsoft Q# Coding Contests\">Q#</Radio.Button>\n        <Radio.Button value=\"Other Contests\">Others</Radio.Button>\n        <Radio.Button value=\"All Contests\">All</Radio.Button>\n      </Radio.Group>\n\n      <ContestTable\n        name={contest}\n        isShowDifficulty={isShowDifficulty}\n        userId={props.userId}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TableTabButtons;\n","import React from \"react\";\nimport Header from \"../../components/Header/Header\";\n\nimport TableTabButtons from \"./TableTab\";\n\ninterface Props {\n  userId: string | undefined;\n}\n\nconst TablePage: React.FunctionComponent<Props> = (props: Props) => {\n  return (\n    <>\n      <Header userId={props.userId} location=\"table\" />\n      <div className=\"Main\">\n        <TableTabButtons userId={props.userId} />\n      </div>\n    </>\n  );\n};\n\nexport default TablePage;\n","import React from \"react\";\nimport { Alert } from \"antd\";\n\nconst UserNotFound: React.FunctionComponent = (props) => {\n  return <Alert message=\"User not found!\" type=\"error\" />;\n};\n\nexport default UserNotFound;\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nconst Loading: React.FunctionComponent = (props) => {\n  return <Spin size=\"large\" />;\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { getRatingColorClass } from \"../../utils/colors\";\nimport { Tooltip } from \"antd\";\n\nimport TopcoderLikeCircle from \"../../components/TopcoderLikeCircle\";\n\ninterface Props {\n  userId: string;\n  rating: number;\n}\n\nconst UserNameLabel: React.FunctionComponent<Props> = (props: Props) => {\n  const c = getRatingColorClass(props.rating);\n  const userRatingCircle =\n    props.rating === undefined ? (\n      <Tooltip title=\"Unrated\" color=\"black\">\n        <div className=\"difficulty-unavailable-circle\">\n          <span className=\"big-difficulty-circle\"></span>\n        </div>\n      </Tooltip>\n    ) : (\n      <Tooltip title={\"Rating: \" + String(props.rating)} color=\"black\">\n        <TopcoderLikeCircle rating={props.rating} big={true} />{\" \"}\n      </Tooltip>\n    );\n\n  return (\n    <h3>\n      {userRatingCircle}{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={\"https://codeforces.com/profile/\" + props.userId}\n        className={c}\n      >\n        {props.userId}\n      </a>\n    </h3>\n  );\n};\n\nexport default UserNameLabel;\n","import React from \"react\";\nimport { Row, Col, Badge, Tooltip } from \"antd\";\n\ninterface Props {\n  userId: string;\n  solvedCountAll: number;\n  solvedCountLastYear: number;\n  solvedCountLastMonth: number;\n  longestStreak: number;\n  currentStreak: number;\n  streakSum: number;\n}\n\nconst colProps = {\n  xxl: 8,\n  xl: 8,\n  lg: 8,\n  md: 8,\n  sm: 8,\n  xs: 12,\n};\n\nconst badge = (\n  <Tooltip title=\"Each achievement is based on Local Time.\" color=\"black\">\n    <span>\n      <Badge\n        title=\"\"\n        count=\"?\"\n        style={{ backgroundColor: \"#6c757d\", borderColor: \"#6c757d\" }}\n      />\n    </span>\n  </Tooltip>\n);\n\nconst Achievement: React.FunctionComponent<Props> = (props: Props) => {\n  return (\n    <React.Fragment>\n      <h3>Achievements {badge}</h3>\n      <hr />\n\n      <Row gutter={10}>\n        <Col {...colProps} key=\"solved-all\" className=\"achievement-item\">\n          <h6>solved for all time</h6>\n          <h4>{props.solvedCountAll} problems</h4>\n        </Col>\n        <Col {...colProps} key=\"solved-year\" className=\"achievement-item\">\n          <h6>solved for the last year</h6>\n          <h4>{props.solvedCountLastYear} problems</h4>\n        </Col>\n        <Col {...colProps} key=\"solved-month\" className=\"achievement-item\">\n          <h6>solved for the last month</h6>\n          <h4>{props.solvedCountLastMonth} problems</h4>\n        </Col>\n      </Row>\n      <Row gutter={10}>\n        <Col {...colProps} key=\"longest-streak\" className=\"achievement-item\">\n          <h6>Longest Streak</h6>\n          <h4>{props.longestStreak} days</h4>\n        </Col>\n        <Col {...colProps} key=\"current-streak\" className=\"achievement-item\">\n          <h6>Current Streak</h6>\n          <h4>{props.currentStreak} days</h4>\n        </Col>\n        <Col {...colProps} key=\"streak-sum\" className=\"achievement-item\">\n          <h6>Streak Sum</h6>\n          <h4>{props.streakSum} days</h4>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Achievement;\n","export const formatFullDate = (dateSecond: number): string => {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const hh = String(date.getHours()).padStart(2, \"0\");\n  const min = String(date.getMinutes()).padStart(2, \"0\");\n  const sec = String(date.getSeconds()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd} ${hh}:${min}:${sec}`;\n};\n\nexport const formatDate = (dateSecond: number): string => {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n};\n","import React from \"react\";\n\nimport { Table } from \"antd\";\nimport DifficultyCircle from \"../../components/DifficultyCircle\";\nimport { getRatingColorClass } from \"../../utils/colors\";\nimport { formatFullDate } from \"../../utils/formatDate\";\n\nconst columns = [\n  {\n    title: \"Date\",\n    dataIndex: \"creationTimeSeconds\",\n    key: \"creationTimeSeconds\",\n  },\n  {\n    title: \"Problem\",\n    dataIndex: \"problem\",\n    key: \"problem\",\n  },\n  {\n    title: \"Verdict\",\n    dataIndex: \"verdict\",\n    key: \"verdict\",\n  },\n  {\n    title: \"Language\",\n    dataIndex: \"programmingLanguage\",\n    key: \"programmingLanguage\",\n  },\n  {\n    title: \"Detail\",\n    dataIndex: \"detail\",\n    key: \"detail\",\n  },\n];\n\ninterface Props {\n  submission: any[];\n}\n\nconst SubmissionListTable: React.FunctionComponent<Props> = (props: Props) => {\n  const dataSource = props.submission.map((x) => {\n    const submissionSecond = x.creationTimeSeconds;\n    const rating: number | undefined = x.problem.rating;\n    const difficultyCircle = <DifficultyCircle rating={x.problem.rating} />;\n\n    const contestId: string = String(x.problem.contestId);\n    const problemIndex: string = String(x.problem.index);\n    const submissionId: string = String(x.submissionId);\n    const submissionUrl: string =\n      \"https://codeforces.com/contest/\" +\n      contestId +\n      \"/submission/\" +\n      submissionId;\n    const problemUrl: string =\n      \"https://codeforces.com/contest/\" +\n      contestId +\n      \"/problem/\" +\n      problemIndex;\n\n    let verdict = x.verdict;\n    switch (verdict) {\n      case undefined:\n        verdict = \"unknown\";\n        break;\n      case \"OK\":\n        verdict = <div className=\"verdict-accepted\">Accepted</div>;\n        break;\n      case \"WRONG_ANSWER\":\n        verdict = <div className=\"verdict-rejected\">Wrong answer</div>;\n        break;\n      case \"TIME_LIMIT_EXCEEDED\":\n        verdict = <div className=\"verdict-rejected\">Time limit exceeded</div>;\n        break;\n      case \"COMPILATION_ERROR\":\n        verdict = <div className=\"verdict-rejected\">Compilation error</div>;\n        break;\n      case \"MEMORY_LIMIT_EXCEEDED\":\n        verdict = <div className=\"verdict-rejected\">Memory limit exceeded</div>;\n        break;\n      case \"RUNTIME_ERROR\":\n        verdict = <div className=\"verdict-rejected\">Runtime error</div>;\n        break;\n      case \"PRESENTATION_ERROR\":\n        verdict = <div className=\"verdict-rejected\">Presentation error</div>;\n        break;\n      case \"IDLENESS_LIMIT_EXCEEDED\":\n        verdict = (\n          <div className=\"verdict-rejected\">Idleness limit exceeded</div>\n        );\n        break;\n    }\n\n    const obj = {\n      key: String(x.creationTimeSeconds),\n      creationTimeSeconds: (\n        <div className=\"cell-element\">{formatFullDate(submissionSecond)}</div>\n      ),\n      problem: (\n        <div className=\"cell-element\">\n          {difficultyCircle}\n          <a\n            href={problemUrl}\n            target=\"_blank\"\n            rel=\"noopenner noreferrer\"\n            className={getRatingColorClass(rating)}\n          >\n            {String(x.problem.index) + \". \" + String(x.problem.name)}\n          </a>\n        </div>\n      ),\n      programmingLanguage: (\n        <div className=\"cell-element\">{String(x.programmingLanguage)}</div>\n      ),\n      verdict: <div className=\"cell-element\">{verdict}</div>,\n      detail: (\n        <div className=\"cell-element\">\n          <a href={submissionUrl} target=\"_blank\" rel=\"noopenner noreferrer\">\n            Detail\n          </a>\n        </div>\n      ),\n    };\n    return obj;\n  });\n\n  return (\n    <React.Fragment>\n      <h3>Submissions</h3>\n      <hr />\n      <br />\n      <Table bordered={true} dataSource={dataSource} columns={columns} />\n    </React.Fragment>\n  );\n};\n\nexport default SubmissionListTable;\n","import { RatingColor, getRatingColorCode } from \"../../utils/colors\";\n\nimport { formatDate } from \"../../utils/formatDate\";\n\ninterface DailyEffortTooltipPayload {\n  value: number;\n  dataKey: RatingColor;\n}\n\ninterface CustomTooltipProps {\n  active?: boolean;\n  payload?: DailyEffortTooltipPayload[];\n  label: number;\n}\n\nexport const CustomTooltip: React.FunctionComponent<CustomTooltipProps> = (\n  props\n) => {\n  if (!props.active || props.payload === undefined) return null;\n\n  const dateSecond = props.label;\n\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: \"0px\",\n        padding: \"10px\",\n        backgroundColor: \"rgb(255, 255, 255)\",\n        border: \"1px solid rgb(204, 204, 204)\",\n        whiteSpace: \"nowrap\",\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: \"0px\" }}>\n        {formatDate(dateSecond)}\n      </p>\n\n      <ul\n        className=\"recharts-tooltip-item-list\"\n        style={{ padding: \"0px\", margin: \"0px\" }}\n      >\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: \"block\",\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\",\n            color: \"rgb(136, 132, 216)\",\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">count</span>\n          <span className=\"recharts-tooltip-item-separator\"> : </span>\n          <span className=\"recharts-tooltip-item-value\">\n            {props.payload.reduce(\n              (acc: number, entry: DailyEffortTooltipPayload) =>\n                acc + entry.value,\n              0\n            )}\n          </span>\n        </li>\n      </ul>\n\n      <hr style={{ marginTop: \"0.3em\", marginBottom: \"0.3em\" }} />\n\n      <div>\n        {props.payload &&\n          props.payload\n            .slice()\n            .reverse()\n            .map((entry: DailyEffortTooltipPayload) => {\n              if (entry.value <= 0) return null;\n              return (\n                <div\n                  key={entry.dataKey}\n                  style={{ color: getRatingColorCode(entry.dataKey) }}\n                >\n                  {entry.dataKey === \"Black\" ? \"Other\" : entry.dataKey}\n                  {\" : \"}\n                  {entry.value}\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport { ratingColors, getRatingColorCode } from \"../../utils/colors\";\n\nimport { CustomTooltip } from \"./CustomTooltip\";\nimport { formatDate } from \"../../utils/formatDate\";\n\ninterface Props {\n  solvedHistory: object[];\n}\n\nconst ClimbingChart: React.FunctionComponent<Props> = (props) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <AreaChart\n        data={props.solvedHistory}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"dateSecond\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          type=\"number\"\n          tickFormatter={(dateSecond: number): string => formatDate(dateSecond)}\n        />\n\n        <YAxis />\n        <Tooltip content={<CustomTooltip label={1} />} />\n\n        {ratingColors.map((ratingColor) => {\n          const colorCode: string = getRatingColorCode(ratingColor);\n          return (\n            <Area\n              type=\"linear\"\n              isAnimationActive={false}\n              key={ratingColor}\n              dataKey={ratingColor === \"Black\" ? \"Other\" : ratingColor}\n              stackId=\"1\"\n              stroke={colorCode}\n              fill={colorCode}\n            />\n          );\n        })}\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\ninterface Props {\n  solvedHistory: object[];\n}\n\nconst Climbing: React.FunctionComponent<Props> = (props: Props) => {\n  return (\n    <React.Fragment>\n      <h3>Climbing</h3>\n      <hr />\n      <ClimbingChart solvedHistory={props.solvedHistory} />\n    </React.Fragment>\n  );\n};\n\nexport default Climbing;\n","import React from \"react\";\n\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\nimport { Select } from \"antd\";\nimport { useTheme } from \"../../components/ThemeProvider\";\n\ninterface Props {\n  data: any[];\n}\n\nconst Customtooltip = (x: any) => {\n  return (\n    <React.Fragment>\n      {x.value ? (\n        <div\n          style={{\n            background: \"black\",\n            color: \"white\",\n            padding: \"8px\",\n            borderRadius: \"10px\",\n            textAlign: \"center\",\n          }}\n        >\n          {x.day}\n          <br />\n          {x.value} submissions\n        </div>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\ninterface CalendarProps {\n  data: any[];\n  year: string;\n}\n\nconst MyResponsiveCalendar = (props: CalendarProps) => {\n  const theme = useTheme();\n\n  return (\n    <ResponsiveCalendar\n      data={props.data}\n      from={props.year + \"-01-01\"}\n      to={props.year + \"-12-31\"}\n      emptyColor=\"#ebedf0\"\n      colors={[\"#C6E48B\", \"#7BC96F\", \"#239A3B\", \"#196127\"]}\n      minValue=\"auto\"\n      theme={{ textColor: theme === \"dark\" ? \"#fff\" : \"#333\" }}\n      margin={{ top: 5, right: 5, bottom: 5, left: 25 }}\n      yearSpacing={45}\n      dayBorderWidth={0.5}\n      dayBorderColor={theme === \"dark\" ? \"#333\" : \"#fff\"}\n      monthBorderWidth={0}\n      tooltip={Customtooltip}\n      legends={[\n        {\n          anchor: \"bottom-right\",\n          direction: \"row\",\n          translateY: 36,\n          itemCount: 4,\n          itemWidth: 42,\n          itemHeight: 36,\n          itemsSpacing: 14,\n          itemDirection: \"right-to-left\",\n        },\n      ]}\n    />\n  );\n};\n\nconst Heatmap: React.FunctionComponent<Props> = (props: Props) => {\n  const yearsSet: Set<string> = new Set();\n  props.data.forEach((x) => {\n    yearsSet.add(x.day.slice(0, 4));\n  });\n\n  let years: string[] = Array.from(yearsSet);\n  years.reverse();\n\n  const [selectYear, setSelectYear] = React.useState(years[0]);\n\n  React.useEffect(() => {}, []);\n\n  return (\n    <React.Fragment>\n      <h3>Heatmap</h3>\n      <hr />\n\n      <div style={{ height: 300, marginBottom: 50 }}>\n        <div style={{ textAlign: \"right\", paddingTop: \"20px\" }}>\n          {years.length > 0 && (\n            <Select\n              defaultValue=\"Choose year\"\n              style={{ width: 150, textAlign: \"left\" }}\n              onChange={(value) => {\n                setSelectYear(value);\n              }}\n            >\n              {years.map((year: string) => (\n                <Select.Option value={year} key={year}>\n                  {year}\n                </Select.Option>\n              ))}\n            </Select>\n          )}\n        </div>\n\n        <MyResponsiveCalendar data={props.data} year={selectYear} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Heatmap;\n","import { getRatingColor } from \"../../utils/colors\";\n\nfunction formatDate(dateSecond: number): string {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport const makeSolvedHistory = (submission: any[]) => {\n  let count = 0;\n  let cntRed = 0;\n  let cntOrange = 0;\n  let cntViolet = 0;\n  let cntBlue = 0;\n  let cntCyan = 0;\n  let cntGreen = 0;\n  let cntGrey = 0;\n  let cntOther = 0;\n\n  let solvedHistory: any[] = [];\n\n  let isSolved = new Map();\n  const revSubmission: any[] = submission.slice().reverse();\n\n  let newRevSubmission = [] as any[];\n  revSubmission.forEach((x) => {\n    if (x.verdict !== \"OK\") {\n      return;\n    }\n\n    const p = x.problem;\n    const problemId = String(p.contestId) + \":\" + String(p.index);\n\n    if (isSolved.get(problemId)) {\n      return;\n    }\n\n    isSolved.set(problemId, true);\n    newRevSubmission.push(x);\n  });\n\n  const numSubmission: number = newRevSubmission.length;\n\n  for (let i = 0; i < numSubmission; i++) {\n    const x = newRevSubmission[i];\n\n    count++;\n\n    const color = getRatingColor(x.problem.rating);\n\n    switch (color) {\n      case \"Red\":\n        cntRed++;\n        break;\n      case \"Orange\":\n        cntOrange++;\n        break;\n      case \"Violet\":\n        cntViolet++;\n        break;\n      case \"Blue\":\n        cntBlue++;\n        break;\n      case \"Cyan\":\n        cntCyan++;\n        break;\n      case \"Green\":\n        cntGreen++;\n        break;\n      case \"Grey\":\n        cntGrey++;\n        break;\n      case \"Black\":\n        cntOther++;\n        break;\n    }\n\n    const dateSecond = x.creationTimeSeconds;\n    if (\n      i !== numSubmission - 1 &&\n      numSubmission > 1 &&\n      formatDate(dateSecond) ===\n        formatDate(newRevSubmission[i + 1].creationTimeSeconds)\n    ) {\n      continue;\n    }\n\n    solvedHistory.push({\n      dateSecond: dateSecond,\n      dateFormat: formatDate(dateSecond),\n      count: count,\n      Red: cntRed,\n      Orange: cntOrange,\n      Violet: cntViolet,\n      Blue: cntBlue,\n      Cyan: cntCyan,\n      Green: cntGreen,\n      Grey: cntGrey,\n      Other: cntOther,\n    });\n  }\n\n  return solvedHistory;\n};\n","function formatDate(dateSecond: number): string {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport const makeSubmissionHistory = (submission: any[]) => {\n  let count = 0;\n  let submissionHistory: any[] = [];\n  const revSubmission: any[] = submission.slice().reverse();\n  const numSubmission = revSubmission.length;\n\n  for (let i = 0; i < numSubmission; i++) {\n    if (\n      i !== numSubmission - 1 &&\n      formatDate(revSubmission[i].creationTimeSeconds) ===\n        formatDate(revSubmission[i + 1].creationTimeSeconds)\n    ) {\n      count++;\n      continue;\n    }\n\n    submissionHistory.push({\n      day: formatDate(revSubmission[i].creationTimeSeconds),\n      value: count + 1,\n    });\n    count = 0;\n  }\n\n  return submissionHistory;\n};\n","import { formatDate } from \"../../utils/formatDate\";\n\nexport const fetchUserSubmission = async (url: string): Promise<any> => {\n  let submission: any[] = [];\n\n  await fetch(url)\n    .then((res) => res.json())\n    .then((x) => {\n      submission = x.result?.map((e: any) => {\n        let obj = {\n          creationTimeSeconds: e.creationTimeSeconds,\n          problem: e.problem,\n          verdict: e.verdict,\n          programmingLanguage: e.programmingLanguage,\n          submissionId: e.id,\n        };\n        return obj;\n      });\n    })\n    .catch((error) => {\n      console.log(\"Error: \", error.message);\n      return [];\n    });\n\n  return submission;\n};\n\nexport const makeAchievementData = (submission: any[]) => {\n  let isSolved = new Map();\n  let isSolvedDay = new Map();\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = today.getMonth();\n\n  let cntSolveLastYear = 0;\n  let cntSolveLastMonth = 0;\n\n  let uniqDaySubmissions: number[] = [];\n  submission.forEach((x) => {\n    if (x.verdict !== \"OK\") {\n      return;\n    }\n    const time = new Date(x.creationTimeSeconds * 1000);\n    const problemId =\n      String(x.problem.contestId) + \":\" + String(x.problem.index);\n\n    if (isSolved.get(problemId) === undefined) {\n      if (month === 1) {\n        if (time.getMonth() === 12 && time.getFullYear() === year - 1) {\n          cntSolveLastMonth++;\n        }\n      } else {\n        if (time.getMonth() === month - 1 && time.getFullYear() === year) {\n          cntSolveLastMonth++;\n        }\n      }\n      if (time.getFullYear() === year - 1) {\n        cntSolveLastYear++;\n      }\n      isSolved.set(problemId, true);\n\n      const formatted = formatDate(time.getTime() / 1000);\n      if (isSolvedDay.get(formatted) === undefined) {\n        isSolvedDay.set(formatted, true);\n        uniqDaySubmissions.push(x.creationTimeSeconds);\n      }\n    }\n  });\n  let cntCurrentStreak = 0;\n  let tmpTime = today;\n  for (let i = 0; i < uniqDaySubmissions.length; i++) {\n    const x = uniqDaySubmissions[i];\n    const e = formatDate(x);\n\n    if (formatDate(tmpTime.getTime() / 1000) === e) {\n      cntCurrentStreak++;\n    } else {\n      break;\n    }\n    tmpTime = new Date(tmpTime.getTime() - 24 * 3600 * 1000);\n  }\n\n  uniqDaySubmissions.reverse();\n\n  let cntLongestStreak = 0;\n  let tmp = 0;\n  for (let i = 0; i < uniqDaySubmissions.length; i++) {\n    if (i === 0) {\n      cntLongestStreak = 1;\n      tmp = 1;\n      continue;\n    }\n    const lastTime: string = formatDate(uniqDaySubmissions[i] - 24 * 3600);\n    const prevTime: string = formatDate(uniqDaySubmissions[i - 1]);\n\n    if (lastTime === prevTime) {\n      tmp++;\n    } else {\n      tmp = 1;\n    }\n    cntLongestStreak = Math.max(cntLongestStreak, tmp);\n  }\n\n  return {\n    submission: submission,\n    solvedCountAll: isSolved.size,\n    solvedCountLastYear: cntSolveLastYear,\n    solvedCountLastMonth: cntSolveLastMonth,\n    longestStreak: cntLongestStreak,\n    currentStreak: cntCurrentStreak,\n    streakSum: isSolvedDay.size,\n  };\n};\n","import React from \"react\";\nimport Header from \"../..//components/Header/Header\";\nimport UserNotFound from \"./UserNotFound\";\nimport ErrorMessage from \"../TablePage/ErrorMessage\";\nimport Loading from \"./Loading\";\nimport UserNameLabel from \"./UserNameLabel\";\nimport Achievement from \"./Achievement\";\nimport SubmissionListTable from \"./SubmissionListTable\";\nimport Climbing from \"./Climbing\";\nimport Heatmap from \"./Heatmap\";\n\nimport { makeSolvedHistory } from \"./makeSolvedHistory\";\nimport { makeSubmissionHistory } from \"./makeSubmissionHistory\";\nimport { fetchUserSubmission, makeAchievementData } from \"./userUtils\";\nimport { cachedUserInfo } from \"../../utils/TypedCachedApiClient\";\n\ninterface Props {\n  userId: string;\n}\n\nconst User: React.FunctionComponent<Props> = (props: Props) => {\n  const [isError, setIsError] = React.useState(false);\n  const [isUserExist, setIsUserExist] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [userRating, setUserRating] = React.useState(0);\n  const [userSubmission, setUserSubmission] = React.useState([] as any[]);\n  const [userInfo, setUserInfo] = React.useState({\n    solvedCountAll: 0,\n    solvedCountLastYear: 0,\n    solvedCountLastMonth: 0,\n    longestStreak: 0,\n    currentStreak: 0,\n    streakSum: 0,\n    solvedHistory: [] as any[],\n    submissionHistory: [] as any[],\n  });\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    let isMounted = true;\n\n    const getUserInfo = async (userId: string) => {\n      const str = \"https://codeforces.com/api/user.status?handle=\";\n      const userInfo = await cachedUserInfo(props.userId);\n\n      if (userInfo.isUserExist && userInfo.isError === false) {\n        const submissions = await fetchUserSubmission(str + userId);\n        const res = makeAchievementData(submissions);\n        if (isMounted) {\n          setIsLoading(false);\n          setUserSubmission(submissions);\n          setUserInfo({\n            solvedCountAll: res.solvedCountAll,\n            solvedCountLastYear: res.solvedCountLastYear,\n            solvedCountLastMonth: res.solvedCountLastMonth,\n            longestStreak: res.longestStreak,\n            currentStreak: res.currentStreak,\n            streakSum: res.streakSum,\n            solvedHistory: makeSolvedHistory(submissions),\n            submissionHistory: makeSubmissionHistory(submissions),\n          });\n          setIsUserExist(userInfo.isUserExist);\n          setUserRating(userInfo.userRating);\n        }\n      } else {\n        if (isMounted) {\n          setIsLoading(false);\n          setIsError(userInfo.isError);\n          setIsUserExist(userInfo.isUserExist);\n        }\n      }\n    };\n\n    void getUserInfo(props.userId);\n\n    return () => {\n      isMounted = false;\n    };\n  }, [props.userId]);\n\n  const element =\n    isUserExist && isError === false ? (\n      <>\n        <UserNameLabel userId={props.userId} rating={userRating} />\n        <hr />\n        <Achievement\n          userId={props.userId}\n          solvedCountAll={userInfo.solvedCountAll}\n          solvedCountLastYear={userInfo.solvedCountLastYear}\n          solvedCountLastMonth={userInfo.solvedCountLastMonth}\n          longestStreak={userInfo.longestStreak}\n          currentStreak={userInfo.currentStreak}\n          streakSum={userInfo.streakSum}\n        />\n        <Climbing solvedHistory={userInfo.solvedHistory} />\n        <Heatmap data={userInfo.submissionHistory} />\n        <SubmissionListTable submission={userSubmission} />\n      </>\n    ) : isError ? (\n      <ErrorMessage />\n    ) : (\n      <UserNotFound />\n    );\n  const a = isLoading ? <Loading /> : element;\n\n  return (\n    <>\n      <Header userId={props.userId} location=\"user\" />\n      <div className=\"Main\">{a}</div>\n    </>\n  );\n};\n\nexport default User;\n","import React from \"react\";\nimport { HashRouter, Route, Redirect, Switch } from \"react-router-dom\";\n\nimport ThemeProvider from \"./components/ThemeProvider\";\nimport TablePage from \"./pages/TablePage/index\";\nimport User from \"./pages/UserPage/index\";\n\nconst App: React.FunctionComponent = () => (\n  <ThemeProvider>\n    <HashRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route\n            path=\"/table/:userIds([a-zA-Z0-9_.]*)*\"\n            render={({ match }): React.ReactElement => {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              const params: { userIds?: string } = match.params;\n              const userId = params.userIds === undefined ? \"\" : params.userIds;\n              return <TablePage userId={userId} />;\n            }}\n          />\n          <Route\n            path=\"/user/:userIds([a-zA-Z0-9_.]*)*\"\n            render={({ match }): React.ReactElement => {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              const params: { userIds?: string } = match.params;\n              const userId = params.userIds === undefined ? \"\" : params.userIds;\n              return <User userId={userId} />;\n            }}\n          />\n\n          {/*Default Path*/}\n          <Redirect path=\"/\" to=\"/table/\" />\n        </Switch>\n      </div>\n    </HashRouter>\n  </ThemeProvider>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./style/index.scss\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}