{"version":3,"sources":["pages/UserPage/UserNotFound.tsx","pages/UserPage/Loading.tsx","pages/UserPage/UserNameLabel.tsx","pages/UserPage/Achievement.tsx","utils/formatDate.ts","pages/UserPage/SubmissionListTable.tsx","pages/UserPage/CustomTooltip.tsx","pages/UserPage/Climbing.tsx","pages/UserPage/Heatmap.tsx","pages/UserPage/makeSolvedHistory.ts","pages/UserPage/makeSubmissionHistory.ts","pages/UserPage/userUtils.ts","pages/UserPage/index.tsx"],"names":["UserNotFound","props","message","type","Loading","size","UserNameLabel","c","getRatingColorClass","rating","userRatingCircle","undefined","title","color","className","String","TopcoderLikeCircle","big","target","rel","href","userId","colProps","xxl","xl","lg","md","sm","xs","badge","count","style","backgroundColor","borderColor","Achievement","Fragment","gutter","key","solvedCountAll","solvedCountLastYear","solvedCountLastMonth","longestStreak","currentStreak","streakSum","formatFullDate","dateSecond","date","Date","yyyy","getFullYear","mm","getMonth","padStart","dd","getDate","hh","getHours","min","getMinutes","sec","getSeconds","formatDate","columns","dataIndex","SubmissionListTable","dataSource","submission","map","x","submissionSecond","creationTimeSeconds","problem","difficultyCircle","DifficultyCircle","contestId","problemIndex","index","submissionUrl","submissionId","problemUrl","verdict","name","programmingLanguage","detail","bordered","CustomTooltip","active","payload","label","margin","padding","border","whiteSpace","display","paddingTop","paddingBottom","reduce","acc","entry","value","marginTop","marginBottom","slice","reverse","getRatingColorCode","dataKey","ClimbingChart","ResponsiveContainer","width","height","AreaChart","data","solvedHistory","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","domain","tickFormatter","YAxis","Tooltip","content","ratingColors","ratingColor","colorCode","Area","isAnimationActive","stackId","stroke","fill","Climbing","Customtooltip","background","borderRadius","textAlign","day","MyResponsiveCalendar","theme","useTheme","from","year","to","emptyColor","colors","minValue","textColor","yearSpacing","dayBorderWidth","dayBorderColor","monthBorderWidth","tooltip","legends","anchor","direction","translateY","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","Heatmap","yearsSet","Set","forEach","add","years","Array","React","useState","selectYear","setSelectYear","useEffect","length","defaultValue","onChange","Option","makeSolvedHistory","cntRed","cntOrange","cntViolet","cntBlue","cntCyan","cntGreen","cntGrey","cntOther","isSolved","Map","revSubmission","newRevSubmission","p","problemId","get","set","push","numSubmission","i","getRatingColor","dateFormat","Red","Orange","Violet","Blue","Cyan","Green","Grey","Other","makeSubmissionHistory","submissionHistory","fetchUserSubmission","url","a","fetch","then","res","json","result","e","id","catch","error","console","log","makeAchievementData","isSolvedDay","today","month","cntSolveLastYear","cntSolveLastMonth","uniqDaySubmissions","time","formatted","getTime","cntCurrentStreak","tmpTime","cntLongestStreak","tmp","Math","max","User","isError","setIsError","isUserExist","setIsUserExist","isLoading","setIsLoading","userRating","setUserRating","userSubmission","setUserSubmission","userInfo","setUserInfo","isMounted","str","cachedUserInfo","submissions","getUserInfo","element","ErrorMessage","Header","location"],"mappings":"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","file":"static/js/7.d1e1141f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Alert } from \"antd\";\n\nconst UserNotFound: React.FunctionComponent = (props) => {\n  return <Alert message=\"User not found!\" type=\"error\" />;\n};\n\nexport default UserNotFound;\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nconst Loading: React.FunctionComponent = (props) => {\n  return <Spin size=\"large\" />;\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { getRatingColorClass } from \"../../utils/colors\";\nimport { Tooltip } from \"antd\";\n\nimport TopcoderLikeCircle from \"../../components/TopcoderLikeCircle\";\n\ninterface Props {\n  userId: string;\n  rating: number;\n}\n\nconst UserNameLabel: React.FunctionComponent<Props> = (props: Props) => {\n  const c = getRatingColorClass(props.rating);\n  const userRatingCircle =\n    props.rating === undefined ? (\n      <Tooltip title=\"Unrated\" color=\"black\">\n        <div className=\"difficulty-unavailable-circle\">\n          <span className=\"big-difficulty-circle\"></span>\n        </div>\n      </Tooltip>\n    ) : (\n      <Tooltip title={\"Rating: \" + String(props.rating)} color=\"black\">\n        <TopcoderLikeCircle rating={props.rating} big={true} />{\" \"}\n      </Tooltip>\n    );\n\n  return (\n    <h3>\n      {userRatingCircle}{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={\"https://codeforces.com/profile/\" + props.userId}\n        className={c}\n      >\n        {props.userId}\n      </a>\n    </h3>\n  );\n};\n\nexport default UserNameLabel;\n","import React from \"react\";\nimport { Row, Col, Badge, Tooltip } from \"antd\";\n\ninterface Props {\n  userId: string;\n  solvedCountAll: number;\n  solvedCountLastYear: number;\n  solvedCountLastMonth: number;\n  longestStreak: number;\n  currentStreak: number;\n  streakSum: number;\n}\n\nconst colProps = {\n  xxl: 8,\n  xl: 8,\n  lg: 8,\n  md: 8,\n  sm: 8,\n  xs: 12,\n};\n\nconst badge = (\n  <Tooltip title=\"Each achievement is based on Local Time.\" color=\"black\">\n    <span>\n      <Badge\n        title=\"\"\n        count=\"?\"\n        style={{ backgroundColor: \"#6c757d\", borderColor: \"#6c757d\" }}\n      />\n    </span>\n  </Tooltip>\n);\n\nconst Achievement: React.FunctionComponent<Props> = (props: Props) => {\n  return (\n    <React.Fragment>\n      <h3>Achievements {badge}</h3>\n      <hr />\n\n      <Row gutter={10}>\n        <Col {...colProps} key=\"solved-all\" className=\"achievement-item\">\n          <h6>solved for all time</h6>\n          <h4>{props.solvedCountAll} problems</h4>\n        </Col>\n        <Col {...colProps} key=\"solved-year\" className=\"achievement-item\">\n          <h6>solved for the last year</h6>\n          <h4>{props.solvedCountLastYear} problems</h4>\n        </Col>\n        <Col {...colProps} key=\"solved-month\" className=\"achievement-item\">\n          <h6>solved for the last month</h6>\n          <h4>{props.solvedCountLastMonth} problems</h4>\n        </Col>\n      </Row>\n      <Row gutter={10}>\n        <Col {...colProps} key=\"longest-streak\" className=\"achievement-item\">\n          <h6>Longest Streak</h6>\n          <h4>{props.longestStreak} days</h4>\n        </Col>\n        <Col {...colProps} key=\"current-streak\" className=\"achievement-item\">\n          <h6>Current Streak</h6>\n          <h4>{props.currentStreak} days</h4>\n        </Col>\n        <Col {...colProps} key=\"streak-sum\" className=\"achievement-item\">\n          <h6>Streak Sum</h6>\n          <h4>{props.streakSum} days</h4>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Achievement;\n","export const formatFullDate = (dateSecond: number): string => {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const hh = String(date.getHours()).padStart(2, \"0\");\n  const min = String(date.getMinutes()).padStart(2, \"0\");\n  const sec = String(date.getSeconds()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd} ${hh}:${min}:${sec}`;\n};\n\nexport const formatDate = (dateSecond: number): string => {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n};\n","import React from \"react\";\n\nimport { Table } from \"antd\";\nimport DifficultyCircle from \"../../components/DifficultyCircle\";\nimport { getRatingColorClass } from \"../../utils/colors\";\nimport { formatFullDate } from \"../../utils/formatDate\";\n\nconst columns = [\n  {\n    title: \"Date\",\n    dataIndex: \"creationTimeSeconds\",\n    key: \"creationTimeSeconds\",\n  },\n  {\n    title: \"Problem\",\n    dataIndex: \"problem\",\n    key: \"problem\",\n  },\n  {\n    title: \"Verdict\",\n    dataIndex: \"verdict\",\n    key: \"verdict\",\n  },\n  {\n    title: \"Language\",\n    dataIndex: \"programmingLanguage\",\n    key: \"programmingLanguage\",\n  },\n  {\n    title: \"Detail\",\n    dataIndex: \"detail\",\n    key: \"detail\",\n  },\n];\n\ninterface Props {\n  submission: any[];\n}\n\nconst SubmissionListTable: React.FunctionComponent<Props> = (props: Props) => {\n  const dataSource = props.submission.map((x) => {\n    const submissionSecond = x.creationTimeSeconds;\n    const rating: number | undefined = x.problem.rating;\n    const difficultyCircle = <DifficultyCircle rating={x.problem.rating} />;\n\n    const contestId: string = String(x.problem.contestId);\n    const problemIndex: string = String(x.problem.index);\n    const submissionId: string = String(x.submissionId);\n    const submissionUrl: string =\n      \"https://codeforces.com/contest/\" +\n      contestId +\n      \"/submission/\" +\n      submissionId;\n    const problemUrl: string =\n      \"https://codeforces.com/contest/\" +\n      contestId +\n      \"/problem/\" +\n      problemIndex;\n\n    let verdict = x.verdict;\n    switch (verdict) {\n      case undefined:\n        verdict = \"unknown\";\n        break;\n      case \"OK\":\n        verdict = <div className=\"verdict-accepted\">Accepted</div>;\n        break;\n      case \"WRONG_ANSWER\":\n        verdict = <div className=\"verdict-rejected\">Wrong answer</div>;\n        break;\n      case \"TIME_LIMIT_EXCEEDED\":\n        verdict = <div className=\"verdict-rejected\">Time limit exceeded</div>;\n        break;\n      case \"COMPILATION_ERROR\":\n        verdict = <div className=\"verdict-rejected\">Compilation error</div>;\n        break;\n      case \"MEMORY_LIMIT_EXCEEDED\":\n        verdict = <div className=\"verdict-rejected\">Memory limit exceeded</div>;\n        break;\n      case \"RUNTIME_ERROR\":\n        verdict = <div className=\"verdict-rejected\">Runtime error</div>;\n        break;\n      case \"PRESENTATION_ERROR\":\n        verdict = <div className=\"verdict-rejected\">Presentation error</div>;\n        break;\n      case \"IDLENESS_LIMIT_EXCEEDED\":\n        verdict = (\n          <div className=\"verdict-rejected\">Idleness limit exceeded</div>\n        );\n        break;\n    }\n\n    const obj = {\n      key: String(x.creationTimeSeconds),\n      creationTimeSeconds: (\n        <div className=\"cell-element\">{formatFullDate(submissionSecond)}</div>\n      ),\n      problem: (\n        <div className=\"cell-element\">\n          {difficultyCircle}\n          <a\n            href={problemUrl}\n            target=\"_blank\"\n            rel=\"noopenner noreferrer\"\n            className={getRatingColorClass(rating)}\n          >\n            {String(x.problem.index) + \". \" + String(x.problem.name)}\n          </a>\n        </div>\n      ),\n      programmingLanguage: (\n        <div className=\"cell-element\">{String(x.programmingLanguage)}</div>\n      ),\n      verdict: <div className=\"cell-element\">{verdict}</div>,\n      detail: (\n        <div className=\"cell-element\">\n          <a href={submissionUrl} target=\"_blank\" rel=\"noopenner noreferrer\">\n            Detail\n          </a>\n        </div>\n      ),\n    };\n    return obj;\n  });\n\n  return (\n    <React.Fragment>\n      <h3>Submissions</h3>\n      <hr />\n      <br />\n      <Table bordered={true} dataSource={dataSource} columns={columns} />\n    </React.Fragment>\n  );\n};\n\nexport default SubmissionListTable;\n","import { RatingColor, getRatingColorCode } from \"../../utils/colors\";\n\nimport { formatDate } from \"../../utils/formatDate\";\n\ninterface DailyEffortTooltipPayload {\n  value: number;\n  dataKey: RatingColor;\n}\n\ninterface CustomTooltipProps {\n  active?: boolean;\n  payload?: DailyEffortTooltipPayload[];\n  label: number;\n}\n\nexport const CustomTooltip: React.FunctionComponent<CustomTooltipProps> = (\n  props\n) => {\n  if (!props.active || props.payload === undefined) return null;\n\n  const dateSecond = props.label;\n\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: \"0px\",\n        padding: \"10px\",\n        backgroundColor: \"rgb(255, 255, 255)\",\n        border: \"1px solid rgb(204, 204, 204)\",\n        whiteSpace: \"nowrap\",\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: \"0px\" }}>\n        {formatDate(dateSecond)}\n      </p>\n\n      <ul\n        className=\"recharts-tooltip-item-list\"\n        style={{ padding: \"0px\", margin: \"0px\" }}\n      >\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: \"block\",\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\",\n            color: \"rgb(136, 132, 216)\",\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">count</span>\n          <span className=\"recharts-tooltip-item-separator\"> : </span>\n          <span className=\"recharts-tooltip-item-value\">\n            {props.payload.reduce(\n              (acc: number, entry: DailyEffortTooltipPayload) =>\n                acc + entry.value,\n              0\n            )}\n          </span>\n        </li>\n      </ul>\n\n      <hr style={{ marginTop: \"0.3em\", marginBottom: \"0.3em\" }} />\n\n      <div>\n        {props.payload &&\n          props.payload\n            .slice()\n            .reverse()\n            .map((entry: DailyEffortTooltipPayload) => {\n              if (entry.value <= 0) return null;\n              return (\n                <div\n                  key={entry.dataKey}\n                  style={{ color: getRatingColorCode(entry.dataKey) }}\n                >\n                  {entry.dataKey === \"Black\" ? \"Other\" : entry.dataKey}\n                  {\" : \"}\n                  {entry.value}\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport { ratingColors, getRatingColorCode } from \"../../utils/colors\";\n\nimport { CustomTooltip } from \"./CustomTooltip\";\nimport { formatDate } from \"../../utils/formatDate\";\n\ninterface Props {\n  solvedHistory: object[];\n}\n\nconst ClimbingChart: React.FunctionComponent<Props> = (props) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <AreaChart\n        data={props.solvedHistory}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"dateSecond\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          type=\"number\"\n          tickFormatter={(dateSecond: number): string => formatDate(dateSecond)}\n        />\n\n        <YAxis />\n        <Tooltip content={<CustomTooltip label={1} />} />\n\n        {ratingColors.map((ratingColor) => {\n          const colorCode: string = getRatingColorCode(ratingColor);\n          return (\n            <Area\n              type=\"linear\"\n              isAnimationActive={false}\n              key={ratingColor}\n              dataKey={ratingColor === \"Black\" ? \"Other\" : ratingColor}\n              stackId=\"1\"\n              stroke={colorCode}\n              fill={colorCode}\n            />\n          );\n        })}\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\ninterface Props {\n  solvedHistory: object[];\n}\n\nconst Climbing: React.FunctionComponent<Props> = (props: Props) => {\n  return (\n    <React.Fragment>\n      <h3>Climbing</h3>\n      <hr />\n      <ClimbingChart solvedHistory={props.solvedHistory} />\n    </React.Fragment>\n  );\n};\n\nexport default Climbing;\n","import React from \"react\";\n\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\nimport { Select } from \"antd\";\nimport { useTheme } from \"../../components/ThemeProvider\";\n\ninterface Props {\n  data: any[];\n}\n\nconst Customtooltip = (x: any) => {\n  return (\n    <React.Fragment>\n      {x.value ? (\n        <div\n          style={{\n            background: \"black\",\n            color: \"white\",\n            padding: \"8px\",\n            borderRadius: \"10px\",\n            textAlign: \"center\",\n          }}\n        >\n          {x.day}\n          <br />\n          {x.value} submissions\n        </div>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\ninterface CalendarProps {\n  data: any[];\n  year: string;\n}\n\nconst MyResponsiveCalendar = (props: CalendarProps) => {\n  const theme = useTheme();\n\n  return (\n    <ResponsiveCalendar\n      data={props.data}\n      from={props.year + \"-01-01\"}\n      to={props.year + \"-12-31\"}\n      emptyColor=\"#ebedf0\"\n      colors={[\"#C6E48B\", \"#7BC96F\", \"#239A3B\", \"#196127\"]}\n      minValue=\"auto\"\n      theme={{ textColor: theme === \"dark\" ? \"#fff\" : \"#333\" }}\n      margin={{ top: 5, right: 5, bottom: 5, left: 25 }}\n      yearSpacing={45}\n      dayBorderWidth={0.5}\n      dayBorderColor={theme === \"dark\" ? \"#333\" : \"#fff\"}\n      monthBorderWidth={0}\n      tooltip={Customtooltip}\n      legends={[\n        {\n          anchor: \"bottom-right\",\n          direction: \"row\",\n          translateY: 36,\n          itemCount: 4,\n          itemWidth: 42,\n          itemHeight: 36,\n          itemsSpacing: 14,\n          itemDirection: \"right-to-left\",\n        },\n      ]}\n    />\n  );\n};\n\nconst Heatmap: React.FunctionComponent<Props> = (props: Props) => {\n  const yearsSet: Set<string> = new Set();\n  props.data.forEach((x) => {\n    yearsSet.add(x.day.slice(0, 4));\n  });\n\n  let years: string[] = Array.from(yearsSet);\n  years.reverse();\n\n  const [selectYear, setSelectYear] = React.useState(years[0]);\n\n  React.useEffect(() => {}, []);\n\n  return (\n    <React.Fragment>\n      <h3>Heatmap</h3>\n      <hr />\n\n      <div style={{ height: 300, marginBottom: 50 }}>\n        <div style={{ textAlign: \"right\", paddingTop: \"20px\" }}>\n          {years.length > 0 && (\n            <Select\n              defaultValue=\"Choose year\"\n              style={{ width: 150, textAlign: \"left\" }}\n              onChange={(value) => {\n                setSelectYear(value);\n              }}\n            >\n              {years.map((year: string) => (\n                <Select.Option value={year} key={year}>\n                  {year}\n                </Select.Option>\n              ))}\n            </Select>\n          )}\n        </div>\n\n        <MyResponsiveCalendar data={props.data} year={selectYear} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Heatmap;\n","import { getRatingColor } from \"../../utils/colors\";\n\nfunction formatDate(dateSecond: number): string {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport const makeSolvedHistory = (submission: any[]) => {\n  let count = 0;\n  let cntRed = 0;\n  let cntOrange = 0;\n  let cntViolet = 0;\n  let cntBlue = 0;\n  let cntCyan = 0;\n  let cntGreen = 0;\n  let cntGrey = 0;\n  let cntOther = 0;\n\n  let solvedHistory: any[] = [];\n\n  let isSolved = new Map();\n  const revSubmission: any[] = submission.slice().reverse();\n\n  let newRevSubmission = [] as any[];\n  revSubmission.forEach((x) => {\n    if (x.verdict !== \"OK\") {\n      return;\n    }\n\n    const p = x.problem;\n    const problemId = String(p.contestId) + \":\" + String(p.index);\n\n    if (isSolved.get(problemId)) {\n      return;\n    }\n\n    isSolved.set(problemId, true);\n    newRevSubmission.push(x);\n  });\n\n  const numSubmission: number = newRevSubmission.length;\n\n  for (let i = 0; i < numSubmission; i++) {\n    const x = newRevSubmission[i];\n\n    count++;\n\n    const color = getRatingColor(x.problem.rating);\n\n    switch (color) {\n      case \"Red\":\n        cntRed++;\n        break;\n      case \"Orange\":\n        cntOrange++;\n        break;\n      case \"Violet\":\n        cntViolet++;\n        break;\n      case \"Blue\":\n        cntBlue++;\n        break;\n      case \"Cyan\":\n        cntCyan++;\n        break;\n      case \"Green\":\n        cntGreen++;\n        break;\n      case \"Grey\":\n        cntGrey++;\n        break;\n      case \"Black\":\n        cntOther++;\n        break;\n    }\n\n    const dateSecond = x.creationTimeSeconds;\n    if (\n      i !== numSubmission - 1 &&\n      numSubmission > 1 &&\n      formatDate(dateSecond) ===\n        formatDate(newRevSubmission[i + 1].creationTimeSeconds)\n    ) {\n      continue;\n    }\n\n    solvedHistory.push({\n      dateSecond: dateSecond,\n      dateFormat: formatDate(dateSecond),\n      count: count,\n      Red: cntRed,\n      Orange: cntOrange,\n      Violet: cntViolet,\n      Blue: cntBlue,\n      Cyan: cntCyan,\n      Green: cntGreen,\n      Grey: cntGrey,\n      Other: cntOther,\n    });\n  }\n\n  return solvedHistory;\n};\n","function formatDate(dateSecond: number): string {\n  const date = new Date(dateSecond * 1000);\n  const yyyy = String(date.getFullYear());\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport const makeSubmissionHistory = (submission: any[]) => {\n  let count = 0;\n  let submissionHistory: any[] = [];\n  const revSubmission: any[] = submission.slice().reverse();\n  const numSubmission = revSubmission.length;\n\n  for (let i = 0; i < numSubmission; i++) {\n    if (\n      i !== numSubmission - 1 &&\n      formatDate(revSubmission[i].creationTimeSeconds) ===\n        formatDate(revSubmission[i + 1].creationTimeSeconds)\n    ) {\n      count++;\n      continue;\n    }\n\n    submissionHistory.push({\n      day: formatDate(revSubmission[i].creationTimeSeconds),\n      value: count + 1,\n    });\n    count = 0;\n  }\n\n  return submissionHistory;\n};\n","import { formatDate } from \"../../utils/formatDate\";\n\nexport const fetchUserSubmission = async (url: string): Promise<any> => {\n  let submission: any[] = [];\n\n  await fetch(url)\n    .then((res) => res.json())\n    .then((x) => {\n      submission = x.result?.map((e: any) => {\n        let obj = {\n          creationTimeSeconds: e.creationTimeSeconds,\n          problem: e.problem,\n          verdict: e.verdict,\n          programmingLanguage: e.programmingLanguage,\n          submissionId: e.id,\n        };\n        return obj;\n      });\n    })\n    .catch((error) => {\n      console.log(\"Error: \", error.message);\n      return [];\n    });\n\n  return submission;\n};\n\nexport const makeAchievementData = (submission: any[]) => {\n  let isSolved = new Map();\n  let isSolvedDay = new Map();\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = today.getMonth();\n\n  let cntSolveLastYear = 0;\n  let cntSolveLastMonth = 0;\n\n  let uniqDaySubmissions: number[] = [];\n  submission.forEach((x) => {\n    if (x.verdict !== \"OK\") {\n      return;\n    }\n    const time = new Date(x.creationTimeSeconds * 1000);\n    const problemId =\n      String(x.problem.contestId) + \":\" + String(x.problem.index);\n\n    if (isSolved.get(problemId) === undefined) {\n      if (month === 1) {\n        if (time.getMonth() === 12 && time.getFullYear() === year - 1) {\n          cntSolveLastMonth++;\n        }\n      } else {\n        if (time.getMonth() === month - 1 && time.getFullYear() === year) {\n          cntSolveLastMonth++;\n        }\n      }\n      if (time.getFullYear() === year - 1) {\n        cntSolveLastYear++;\n      }\n      isSolved.set(problemId, true);\n\n      const formatted = formatDate(time.getTime() / 1000);\n      if (isSolvedDay.get(formatted) === undefined) {\n        isSolvedDay.set(formatted, true);\n        uniqDaySubmissions.push(x.creationTimeSeconds);\n      }\n    }\n  });\n  let cntCurrentStreak = 0;\n  let tmpTime = today;\n  for (let i = 0; i < uniqDaySubmissions.length; i++) {\n    const x = uniqDaySubmissions[i];\n    const e = formatDate(x);\n\n    if (formatDate(tmpTime.getTime() / 1000) === e) {\n      cntCurrentStreak++;\n    } else {\n      break;\n    }\n    tmpTime = new Date(tmpTime.getTime() - 24 * 3600 * 1000);\n  }\n\n  uniqDaySubmissions.reverse();\n\n  let cntLongestStreak = 0;\n  let tmp = 0;\n  for (let i = 0; i < uniqDaySubmissions.length; i++) {\n    if (i === 0) {\n      cntLongestStreak = 1;\n      tmp = 1;\n      continue;\n    }\n    const lastTime: string = formatDate(uniqDaySubmissions[i] - 24 * 3600);\n    const prevTime: string = formatDate(uniqDaySubmissions[i - 1]);\n\n    if (lastTime === prevTime) {\n      tmp++;\n    } else {\n      tmp = 1;\n    }\n    cntLongestStreak = Math.max(cntLongestStreak, tmp);\n  }\n\n  return {\n    submission: submission,\n    solvedCountAll: isSolved.size,\n    solvedCountLastYear: cntSolveLastYear,\n    solvedCountLastMonth: cntSolveLastMonth,\n    longestStreak: cntLongestStreak,\n    currentStreak: cntCurrentStreak,\n    streakSum: isSolvedDay.size,\n  };\n};\n","import React from \"react\";\nimport Header from \"../..//components/Header/Header\";\nimport UserNotFound from \"./UserNotFound\";\nimport ErrorMessage from \"../TablePage/ErrorMessage\";\nimport Loading from \"./Loading\";\nimport UserNameLabel from \"./UserNameLabel\";\nimport Achievement from \"./Achievement\";\nimport SubmissionListTable from \"./SubmissionListTable\";\nimport Climbing from \"./Climbing\";\nimport Heatmap from \"./Heatmap\";\n\nimport { makeSolvedHistory } from \"./makeSolvedHistory\";\nimport { makeSubmissionHistory } from \"./makeSubmissionHistory\";\nimport { fetchUserSubmission, makeAchievementData } from \"./userUtils\";\nimport { cachedUserInfo } from \"../../utils/TypedCachedApiClient\";\n\ninterface Props {\n  userId: string;\n}\n\nconst User: React.FunctionComponent<Props> = (props: Props) => {\n  const [isError, setIsError] = React.useState(false);\n  const [isUserExist, setIsUserExist] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [userRating, setUserRating] = React.useState(0);\n  const [userSubmission, setUserSubmission] = React.useState([] as any[]);\n  const [userInfo, setUserInfo] = React.useState({\n    solvedCountAll: 0,\n    solvedCountLastYear: 0,\n    solvedCountLastMonth: 0,\n    longestStreak: 0,\n    currentStreak: 0,\n    streakSum: 0,\n    solvedHistory: [] as any[],\n    submissionHistory: [] as any[],\n  });\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    let isMounted = true;\n\n    const getUserInfo = async (userId: string) => {\n      const str = \"https://codeforces.com/api/user.status?handle=\";\n      const userInfo = await cachedUserInfo(props.userId);\n\n      if (userInfo.isUserExist && userInfo.isError === false) {\n        const submissions = await fetchUserSubmission(str + userId);\n        const res = makeAchievementData(submissions);\n        if (isMounted) {\n          setIsLoading(false);\n          setUserSubmission(submissions);\n          setUserInfo({\n            solvedCountAll: res.solvedCountAll,\n            solvedCountLastYear: res.solvedCountLastYear,\n            solvedCountLastMonth: res.solvedCountLastMonth,\n            longestStreak: res.longestStreak,\n            currentStreak: res.currentStreak,\n            streakSum: res.streakSum,\n            solvedHistory: makeSolvedHistory(submissions),\n            submissionHistory: makeSubmissionHistory(submissions),\n          });\n          setIsUserExist(userInfo.isUserExist);\n          setUserRating(userInfo.userRating);\n        }\n      } else {\n        if (isMounted) {\n          setIsLoading(false);\n          setIsError(userInfo.isError);\n          setIsUserExist(userInfo.isUserExist);\n        }\n      }\n    };\n\n    void getUserInfo(props.userId);\n\n    return () => {\n      isMounted = false;\n    };\n  }, [props.userId]);\n\n  const element =\n    isUserExist && isError === false ? (\n      <>\n        <UserNameLabel userId={props.userId} rating={userRating} />\n        <hr />\n        <Achievement\n          userId={props.userId}\n          solvedCountAll={userInfo.solvedCountAll}\n          solvedCountLastYear={userInfo.solvedCountLastYear}\n          solvedCountLastMonth={userInfo.solvedCountLastMonth}\n          longestStreak={userInfo.longestStreak}\n          currentStreak={userInfo.currentStreak}\n          streakSum={userInfo.streakSum}\n        />\n        <Climbing solvedHistory={userInfo.solvedHistory} />\n        <Heatmap data={userInfo.submissionHistory} />\n        <SubmissionListTable submission={userSubmission} />\n      </>\n    ) : isError ? (\n      <ErrorMessage />\n    ) : (\n      <UserNotFound />\n    );\n  const a = isLoading ? <Loading /> : element;\n\n  return (\n    <>\n      <Header userId={props.userId} location=\"user\" />\n      <div className=\"Main\">{a}</div>\n    </>\n  );\n};\n\nexport default User;\n"],"sourceRoot":""}